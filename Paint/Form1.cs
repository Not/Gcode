using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Drawing.Imaging;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Threading;
using System.Windows.Forms;
using System.IO;
using System.Globalization;

namespace Paint
{
    
    public partial class Form1 : Form
    {
     
        string[] sans1 = { "-8 8", "-5 5 0 0 -12 1 0 2 0 0 7 1 -1 8 1 0 9 1 1 8 1 0 7", "-8 8 0 -4 -12 1 -4 -5 0 4 -12 1 4 -5", "-10 11 0 1 -16 1 -6 16 0 7 -16 1 0 16 0 -6 -3 1 8 -3 0 -7 3 1 7 3", "-10 10 0 -2 -16 1 -2 13 0 2 -16 1 2 13 0 7 -9 1 5 -11 1 2 -12 1 -2 -12 1 -5 -11 1 -7 -9 1 -7 -7 1 -6 -5 1 -5 -4 1 -3 -3 1 3 -1 1 5 0 1 6 1 1 7 3 1 7 6 1 5 8 1 2 9 1 -2 9 1 -5 8 1 -7 6", "-12 12 0 9 -12 1 -9 9 0 -4 -12 1 -2 -10 1 -2 -8 1 -3 -6 1 -5 -5 1 -7 -5 1 -9 -7 1 -9 -9 1 -8 -11 1 -6 -12 1 -4 -12 1 -2 -11 1 1 -10 1 4 -10 1 7 -11 1 9 -12 0 5 2 1 3 3 1 2 5 1 2 7 1 4 9 1 6 9 1 8 8 1 9 6 1 9 4 1 7 2 1 5 2", "-13 13 0 10 -3 1 10 -4 1 9 -5 1 8 -5 1 7 -4 1 6 -2 1 4 3 1 2 6 1 0 8 1 -2 9 1 -6 9 1 -8 8 1 -9 7 1 -10 5 1 -10 3 1 -9 1 1 -8 0 1 -1 -4 1 0 -5 1 1 -7 1 1 -9 1 0 -11 1 -2 -12 1 -4 -11 1 -5 -9 1 -5 -7 1 -4 -4 1 -2 -1 1 3 6 1 5 8 1 7 9 1 9 9 1 10 8 1 10 7", "-5 5 0 0 -10 1 -1 -11 1 0 -12 1 1 -11 1 1 -9 1 0 -7 1 -1 -6", "-7 7 0 4 -16 1 2 -14 1 0 -11 1 -2 -7 1 -3 -2 1 -3 2 1 -2 7 1 0 11 1 2 14 1 4 16", "-7 7 0 -4 -16 1 -2 -14 1 0 -11 1 2 -7 1 3 -2 1 3 2 1 2 7 1 0 11 1 -2 14 1 -4 16", "-8 8 0 0 -6 1 0 6 0 -5 -3 1 5 3 0 5 -3 1 -5 3", "-13 13 0 0 -9 1 0 9 0 -9 0 1 9 0", "-4 4 0 1 5 1 0 6 1 -1 5 1 0 4 1 1 5 1 1 7 1 -1 9", "-13 13 0 -9 0 1 9 0", "-4 4 0 0 4 1 -1 5 1 0 6 1 1 5 1 0 4", "-11 11 0 9 -16 1 -9 16", "-10 10 0 -1 -12 1 -4 -11 1 -6 -8 1 -7 -3 1 -7 0 1 -6 5 1 -4 8 1 -1 9 1 1 9 1 4 8 1 6 5 1 7 0 1 7 -3 1 6 -8 1 4 -11 1 1 -12 1 -1 -12", "-10 10 0 -4 -8 1 -2 -9 1 1 -12 1 1 9", "-10 10 0 -6 -7 1 -6 -8 1 -5 -10 1 -4 -11 1 -2 -12 1 2 -12 1 4 -11 1 5 -10 1 6 -8 1 6 -6 1 5 -4 1 3 -1 1 -7 9 1 7 9", "-10 10 0 -5 -12 1 6 -12 1 0 -4 1 3 -4 1 5 -3 1 6 -2 1 7 1 1 7 3 1 6 6 1 4 8 1 1 9 1 -2 9 1 -5 8 1 -6 7 1 -7 5", "-10 10 0 3 -12 1 -7 2 1 8 2 0 3 -12 1 3 9", "-10 10 0 5 -12 1 -5 -12 1 -6 -3 1 -5 -4 1 -2 -5 1 1 -5 1 4 -4 1 6 -2 1 7 1 1 7 3 1 6 6 1 4 8 1 1 9 1 -2 9 1 -5 8 1 -6 7 1 -7 5", "-10 10 0 6 -9 1 5 -11 1 2 -12 1 0 -12 1 -3 -11 1 -5 -8 1 -6 -3 1 -6 2 1 -5 6 1 -3 8 1 0 9 1 1 9 1 4 8 1 6 6 1 7 3 1 7 2 1 6 -1 1 4 -3 1 1 -4 1 0 -4 1 -3 -3 1 -5 -1 1 -6 2", "-10 10 0 7 -12 1 -3 9 0 -7 -12 1 7 -12", "-10 10 0 -2 -12 1 -5 -11 1 -6 -9 1 -6 -7 1 -5 -5 1 -3 -4 1 1 -3 1 4 -2 1 6 0 1 7 2 1 7 5 1 6 7 1 5 8 1 2 9 1 -2 9 1 -5 8 1 -6 7 1 -7 5 1 -7 2 1 -6 0 1 -4 -2 1 -1 -3 1 3 -4 1 5 -5 1 6 -7 1 6 -9 1 5 -11 1 2 -12 1 -2 -12", "-10 10 0 6 -5 1 5 -2 1 3 0 1 0 1 1 -1 1 1 -4 0 1 -6 -2 1 -7 -5 1 -7 -6 1 -6 -9 1 -4 -11 1 -1 -12 1 0 -12 1 3 -11 1 5 -9 1 6 -5 1 6 0 1 5 5 1 3 8 1 0 9 1 -2 9 1 -5 8 1 -6 6", "-4 4 0 0 -3 1 -1 -2 1 0 -1 1 1 -2 1 0 -3 0 0 4 1 -1 5 1 0 6 1 1 5 1 0 4", "-4 4 0 0 -3 1 -1 -2 1 0 -1 1 1 -2 1 0 -3 0 1 5 1 0 6 1 -1 5 1 0 4 1 1 5 1 1 7 1 -1 9", "-12 12 0 8 -9 1 -8 0 1 8 9", "-13 13 0 -9 -3 1 9 -3 0 -9 3 1 9 3", "-12 12 0 -8 -9 1 8 0 1 -8 9", "-9 9 0 -6 -7 1 -6 -8 1 -5 -10 1 -4 -11 1 -2 -12 1 2 -12 1 4 -11 1 5 -10 1 6 -8 1 6 -6 1 5 -4 1 4 -3 1 0 -1 1 0 2 0 0 7 1 -1 8 1 0 9 1 1 8 1 0 7", "-13 14 0 5 -4 1 4 -6 1 2 -7 1 -1 -7 1 -3 -6 1 -4 -5 1 -5 -2 1 -5 1 1 -4 3 1 -2 4 1 1 4 1 3 3 1 4 1 0 -1 -7 1 -3 -5 1 -4 -2 1 -4 1 1 -3 3 1 -2 4 0 5 -7 1 4 1 1 4 3 1 6 4 1 8 4 1 10 2 1 11 -1 1 11 -3 1 10 -6 1 9 -8 1 7 -10 1 5 -11 1 2 -12 1 -1 -12 1 -4 -11 1 -6 -10 1 -8 -8 1 -9 -6 1 -10 -3 1 -10 0 1 -9 3 1 -8 5 1 -6 7 1 -4 8 1 -1 9 1 2 9 1 5 8 1 7 7 1 8 6 0 6 -7 1 5 1 1 5 3 1 6 4", "-9 9 0 0 -12 1 -8 9 0 0 -12 1 8 9 0 -5 2 1 5 2", "-11 10 0 -7 -12 1 -7 9 0 -7 -12 1 2 -12 1 5 -11 1 6 -10 1 7 -8 1 7 -6 1 6 -4 1 5 -3 1 2 -2 0 -7 -2 1 2 -2 1 5 -1 1 6 0 1 7 2 1 7 5 1 6 7 1 5 8 1 2 9 1 -7 9", "-10 11 0 8 -7 1 7 -9 1 5 -11 1 3 -12 1 -1 -12 1 -3 -11 1 -5 -9 1 -6 -7 1 -7 -4 1 -7 1 1 -6 4 1 -5 6 1 -3 8 1 -1 9 1 3 9 1 5 8 1 7 6 1 8 4", "-11 10 0 -7 -12 1 -7 9 0 -7 -12 1 0 -12 1 3 -11 1 5 -9 1 6 -7 1 7 -4 1 7 1 1 6 4 1 5 6 1 3 8 1 0 9 1 -7 9", "-10 9 0 -6 -12 1 -6 9 0 -6 -12 1 7 -12 0 -6 -2 1 2 -2 0 -6 9 1 7 9", "-10 8 0 -6 -12 1 -6 9 0 -6 -12 1 7 -12 0 -6 -2 1 2 -2", "-10 11 0 8 -7 1 7 -9 1 5 -11 1 3 -12 1 -1 -12 1 -3 -11 1 -5 -9 1 -6 -7 1 -7 -4 1 -7 1 1 -6 4 1 -5 6 1 -3 8 1 -1 9 1 3 9 1 5 8 1 7 6 1 8 4 1 8 1 0 3 1 1 8 1", "-11 11 0 -7 -12 1 -7 9 0 7 -12 1 7 9 0 -7 -2 1 7 -2", "-4 4 0 0 -12 1 0 9", "-8 8 0 4 -12 1 4 4 1 3 7 1 2 8 1 0 9 1 -2 9 1 -4 8 1 -5 7 1 -6 4 1 -6 2", "-11 10 0 -7 -12 1 -7 9 0 7 -12 1 -7 2 0 -2 -3 1 7 9", "-10 7 0 -6 -12 1 -6 9 0 -6 9 1 6 9", "-12 12 0 -8 -12 1 -8 9 0 -8 -12 1 0 9 0 8 -12 1 0 9 0 8 -12 1 8 9", "-11 11 0 -7 -12 1 -7 9 0 -7 -12 1 7 9 0 7 -12 1 7 9", "-11 11 0 -2 -12 1 -4 -11 1 -6 -9 1 -7 -7 1 -8 -4 1 -8 1 1 -7 4 1 -6 6 1 -4 8 1 -2 9 1 2 9 1 4 8 1 6 6 1 7 4 1 8 1 1 8 -4 1 7 -7 1 6 -9 1 4 -11 1 2 -12 1 -2 -12", "-11 10 0 -7 -12 1 -7 9 0 -7 -12 1 2 -12 1 5 -11 1 6 -10 1 7 -8 1 7 -5 1 6 -3 1 5 -2 1 2 -1 1 -7 -1", "-11 11 0 -2 -12 1 -4 -11 1 -6 -9 1 -7 -7 1 -8 -4 1 -8 1 1 -7 4 1 -6 6 1 -4 8 1 -2 9 1 2 9 1 4 8 1 6 6 1 7 4 1 8 1 1 8 -4 1 7 -7 1 6 -9 1 4 -11 1 2 -12 1 -2 -12 0 1 5 1 7 11", "-11 10 0 -7 -12 1 -7 9 0 -7 -12 1 2 -12 1 5 -11 1 6 -10 1 7 -8 1 7 -6 1 6 -4 1 5 -3 1 2 -2 1 -7 -2 0 0 -2 1 7 9", "-10 10 0 7 -9 1 5 -11 1 2 -12 1 -2 -12 1 -5 -11 1 -7 -9 1 -7 -7 1 -6 -5 1 -5 -4 1 -3 -3 1 3 -1 1 5 0 1 6 1 1 7 3 1 7 6 1 5 8 1 2 9 1 -2 9 1 -5 8 1 -7 6", "-8 8 0 0 -12 1 0 9 0 -7 -12 1 7 -12", "-11 11 0 -7 -12 1 -7 3 1 -6 6 1 -4 8 1 -1 9 1 1 9 1 4 8 1 6 6 1 7 3 1 7 -12", "-9 9 0 -8 -12 1 0 9 0 8 -12 1 0 9", "-12 12 0 -10 -12 1 -5 9 0 0 -12 1 -5 9 0 0 -12 1 5 9 0 10 -12 1 5 9", "-10 10 0 -7 -12 1 7 9 0 7 -12 1 -7 9", "-9 9 0 -8 -12 1 0 -2 1 0 9 0 8 -12 1 0 -2", "-10 10 0 7 -12 1 -7 9 0 -7 -12 1 7 -12 0 -7 9 1 7 9", "-7 7 0 -3 -16 1 -3 16 0 -2 -16 1 -2 16 0 -3 -16 1 4 -16 0 -3 16 1 4 16", "-7 7 0 -7 -12 1 7 12", "-7 7 0 2 -16 1 2 16 0 3 -16 1 3 16 0 -4 -16 1 3 -16 0 -4 16 1 3 16", "-8 8 0 0 -14 1 -8 0 0 0 -14 1 8 0", "-9 9 0 -9 16 1 9 16", "-4 4 0 1 -7 1 -1 -5 1 -1 -3 1 0 -2 1 1 -3 1 0 -4 1 -1 -3", "-9 10 0 6 -5 1 6 9 0 6 -2 1 4 -4 1 2 -5 1 -1 -5 1 -3 -4 1 -5 -2 1 -6 1 1 -6 3 1 -5 6 1 -3 8 1 -1 9 1 2 9 1 4 8 1 6 6", "-10 9 0 -6 -12 1 -6 9 0 -6 -2 1 -4 -4 1 -2 -5 1 1 -5 1 3 -4 1 5 -2 1 6 1 1 6 3 1 5 6 1 3 8 1 1 9 1 -2 9 1 -4 8 1 -6 6", "-9 9 0 6 -2 1 4 -4 1 2 -5 1 -1 -5 1 -3 -4 1 -5 -2 1 -6 1 1 -6 3 1 -5 6 1 -3 8 1 -1 9 1 2 9 1 4 8 1 6 6", "-9 10 0 6 -12 1 6 9 0 6 -2 1 4 -4 1 2 -5 1 -1 -5 1 -3 -4 1 -5 -2 1 -6 1 1 -6 3 1 -5 6 1 -3 8 1 -1 9 1 2 9 1 4 8 1 6 6", "-9 9 0 -6 1 1 6 1 1 6 -1 1 5 -3 1 4 -4 1 2 -5 1 -1 -5 1 -3 -4 1 -5 -2 1 -6 1 1 -6 3 1 -5 6 1 -3 8 1 -1 9 1 2 9 1 4 8 1 6 6", "-5 7 0 5 -12 1 3 -12 1 1 -11 1 0 -8 1 0 9 0 -3 -5 1 4 -5", "-9 10 0 6 -5 1 6 11 1 5 14 1 4 15 1 2 16 1 -1 16 1 -3 15 0 6 -2 1 4 -4 1 2 -5 1 -1 -5 1 -3 -4 1 -5 -2 1 -6 1 1 -6 3 1 -5 6 1 -3 8 1 -1 9 1 2 9 1 4 8 1 6 6", "-9 10 0 -5 -12 1 -5 9 0 -5 -1 1 -2 -4 1 0 -5 1 3 -5 1 5 -4 1 6 -1 1 6 9", "-4 4 0 -1 -12 1 0 -11 1 1 -12 1 0 -13 1 -1 -12 0 0 -5 1 0 9", "-5 5 0 0 -12 1 1 -11 1 2 -12 1 1 -13 1 0 -12 0 1 -5 1 1 12 1 0 15 1 -2 16 1 -4 16", "-9 8 0 -5 -12 1 -5 9 0 5 -5 1 -5 5 0 -1 1 1 6 9", "-4 4 0 0 -12 1 0 9", "-15 15 0 -11 -5 1 -11 9 0 -11 -1 1 -8 -4 1 -6 -5 1 -3 -5 1 -1 -4 1 0 -1 1 0 9 0 0 -1 1 3 -4 1 5 -5 1 8 -5 1 10 -4 1 11 -1 1 11 9", "-9 10 0 -5 -5 1 -5 9 0 -5 -1 1 -2 -4 1 0 -5 1 3 -5 1 5 -4 1 6 -1 1 6 9", "-9 10 0 -1 -5 1 -3 -4 1 -5 -2 1 -6 1 1 -6 3 1 -5 6 1 -3 8 1 -1 9 1 2 9 1 4 8 1 6 6 1 7 3 1 7 1 1 6 -2 1 4 -4 1 2 -5 1 -1 -5", "-10 9 0 -6 -5 1 -6 16 0 -6 -2 1 -4 -4 1 -2 -5 1 1 -5 1 3 -4 1 5 -2 1 6 1 1 6 3 1 5 6 1 3 8 1 1 9 1 -2 9 1 -4 8 1 -6 6", "-9 10 0 6 -5 1 6 16 0 6 -2 1 4 -4 1 2 -5 1 -1 -5 1 -3 -4 1 -5 -2 1 -6 1 1 -6 3 1 -5 6 1 -3 8 1 -1 9 1 2 9 1 4 8 1 6 6", "-7 6 0 -3 -5 1 -3 9 0 -3 1 1 -2 -2 1 0 -4 1 2 -5 1 5 -5", "-8 9 0 6 -2 1 5 -4 1 2 -5 1 -1 -5 1 -4 -4 1 -5 -2 1 -4 0 1 -2 1 1 3 2 1 5 3 1 6 5 1 6 6 1 5 8 1 2 9 1 -1 9 1 -4 8 1 -5 6", "-5 7 0 0 -12 1 0 5 1 1 8 1 3 9 1 5 9 0 -3 -5 1 4 -5", "-9 10 0 -5 -5 1 -5 5 1 -4 8 1 -2 9 1 1 9 1 3 8 1 6 5 0 6 -5 1 6 9", "-8 8 0 -6 -5 1 0 9 0 6 -5 1 0 9", "-11 11 0 -8 -5 1 -4 9 0 0 -5 1 -4 9 0 0 -5 1 4 9 0 8 -5 1 4 9", "-8 9 0 -5 -5 1 6 9 0 6 -5 1 -5 9", "-8 8 0 -6 -5 1 0 9 0 6 -5 1 0 9 1 -2 13 1 -4 15 1 -6 16 1 -7 16", "-8 9 0 6 -5 1 -5 9 0 -5 -5 1 6 -5 0 -5 9 1 6 9", "-7 7 0 2 -16 1 0 -15 1 -1 -14 1 -2 -12 1 -2 -10 1 -1 -8 1 0 -7 1 1 -5 1 1 -3 1 -1 -1 0 0 -15 1 -1 -13 1 -1 -11 1 0 -9 1 1 -8 1 2 -6 1 2 -4 1 1 -2 1 -3 0 1 1 2 1 2 4 1 2 6 1 1 8 1 0 9 1 -1 11 1 -1 13 1 0 15 0 -1 1 1 1 3 1 1 5 1 0 7 1 -1 8 1 -2 10 1 -2 12 1 -1 14 1 0 15 1 2 16", "-4 4 0 0 -16 1 0 16", "-7 7 0 -2 -16 1 0 -15 1 1 -14 1 2 -12 1 2 -10 1 1 -8 1 0 -7 1 -1 -5 1 -1 -3 1 1 -1 0 0 -15 1 1 -13 1 1 -11 1 0 -9 1 -1 -8 1 -2 -6 1 -2 -4 1 -1 -2 1 3 0 1 -1 2 1 -2 4 1 -2 6 1 -1 8 1 0 9 1 1 11 1 1 13 1 0 15 0 1 1 1 -1 3 1 -1 5 1 0 7 1 1 8 1 2 10 1 2 12 1 1 14 1 0 15 1 -2 16", "-12 12 0 -9 3 1 -9 1 1 -8 -2 1 -6 -3 1 -4 -3 1 -2 -2 1 2 1 1 4 2 1 6 2 1 8 1 1 9 -1 0 -9 1 1 -8 -1 1 -6 -2 1 -4 -2 1 -2 -1 1 2 2 1 4 3 1 6 3 1 8 2 1 9 -1 1 9 -3", "-8 8 0 -8 -12 1 -8 9 1 -7 9 1 -7 -12 1 -6 -12 1 -6 9 1 -5 9 1 -5 -12 1 -4 -12 1 -4 9 1 -3 9 1 -3 -12 1 -2 -12 1 -2 9 1 -1 9 1 -1 -12 1 0 -12 1 0 9 1 1 9 1 1 -12 1 2 -12 1 2 9 1 3 9 1 3 -12 1 4 -12 1 4 9 1 5 9 1 5 -12 1 6 -12 1 6 9 1 7 9 1 7 -12 1 8 -12 1 8 9" };
        string[] sansbold = { "-8 8", "-5 6 0 0 -12 1 0 2 1 1 2 0 0 -12 1 1 -12 1 1 2 0 0 6 1 -1 7 1 -1 8 1 0 9 1 1 9 1 2 8 1 2 7 1 1 6 1 0 6 0 0 7 1 0 8 1 1 8 1 1 7 1 0 7", "-9 9 0 -4 -12 1 -5 -11 1 -5 -5 0 -4 -11 1 -5 -5 0 -4 -12 1 -3 -11 1 -5 -5 0 5 -12 1 4 -11 1 4 -5 0 5 -11 1 4 -5 0 5 -12 1 6 -11 1 4 -5", "-10 11 0 1 -16 1 -6 16 0 7 -16 1 0 16 0 -6 -3 1 8 -3 0 -7 3 1 7 3", "-9 10 0 0 -16 1 0 13 1 1 13 0 0 -16 1 1 -16 1 1 13 0 5 -9 1 7 -9 1 5 -11 1 2 -12 1 -1 -12 1 -4 -11 1 -6 -9 1 -6 -7 1 -5 -5 1 -4 -4 1 4 0 1 5 1 1 6 3 1 6 5 1 5 7 1 2 8 1 -1 8 1 -3 7 1 -4 6 0 5 -9 1 4 -10 1 2 -11 1 -1 -11 1 -4 -10 1 -5 -9 1 -5 -7 1 -4 -5 1 4 -1 1 6 1 1 7 3 1 7 5 1 6 7 1 5 8 1 2 9 1 -1 9 1 -4 8 1 -6 6 1 -4 6 0 6 6 1 3 8", "-12 12 0 9 -12 1 -9 9 0 -4 -12 1 -2 -10 1 -2 -8 1 -3 -6 1 -5 -5 1 -7 -5 1 -9 -7 1 -9 -9 1 -8 -11 1 -6 -12 1 -4 -12 1 -2 -11 1 1 -10 1 4 -10 1 7 -11 1 9 -12 0 5 2 1 3 3 1 2 5 1 2 7 1 4 9 1 6 9 1 8 8 1 9 6 1 9 4 1 7 2 1 5 2", "-12 13 0 9 -4 1 8 -3 1 9 -2 1 10 -3 1 10 -4 1 9 -5 1 8 -5 1 7 -4 1 6 -2 1 4 3 1 2 6 1 0 8 1 -2 9 1 -5 9 1 -8 8 1 -9 6 1 -9 3 1 -8 1 1 -2 -3 1 0 -5 1 1 -7 1 1 -9 1 0 -11 1 -2 -12 1 -4 -11 1 -5 -9 1 -5 -7 1 -4 -4 1 -2 -1 1 3 6 1 5 8 1 8 9 1 9 9 1 10 8 1 10 7 0 -5 9 1 -7 8 1 -8 6 1 -8 3 1 -7 1 1 -5 -1 0 -5 -7 1 -4 -5 1 4 6 1 6 8 1 8 9", "-4 5 0 1 -12 1 0 -11 1 0 -5 0 1 -11 1 0 -5 0 1 -12 1 2 -11 1 0 -5", "-7 7 0 4 -16 1 2 -14 1 0 -11 1 -2 -7 1 -3 -2 1 -3 2 1 -2 7 1 0 11 1 2 14 1 4 16 0 2 -14 1 0 -10 1 -1 -7 1 -2 -2 1 -2 2 1 -1 7 1 0 10 1 2 14", "-7 7 0 -4 -16 1 -2 -14 1 0 -11 1 2 -7 1 3 -2 1 3 2 1 2 7 1 0 11 1 -2 14 1 -4 16 0 -2 -14 1 0 -10 1 1 -7 1 2 -2 1 2 2 1 1 7 1 0 10 1 -2 14", "-8 8 0 0 -12 1 -1 -11 1 1 -1 1 0 0 0 0 -12 1 0 0 0 0 -12 1 1 -11 1 -1 -1 1 0 0 0 -5 -9 1 -4 -9 1 4 -3 1 5 -3 0 -5 -9 1 5 -3 0 -5 -9 1 -5 -8 1 5 -4 1 5 -3 0 5 -9 1 4 -9 1 -4 -3 1 -5 -3 0 5 -9 1 -5 -3 0 5 -9 1 5 -8 1 -5 -4 1 -5 -3", "-12 13 0 0 -9 1 0 8 1 1 8 0 0 -9 1 1 -9 1 1 8 0 -8 -1 1 9 -1 1 9 0 0 -8 -1 1 -8 0 1 9 0", "-5 6 0 2 8 1 1 9 1 0 9 1 -1 8 1 -1 7 1 0 6 1 1 6 1 2 7 1 2 10 1 1 12 1 -1 13 0 0 7 1 0 8 1 1 8 1 1 7 1 0 7 0 1 9 1 2 10 0 2 8 1 1 12", "-13 13 0 -9 0 1 9 0", "-5 6 0 0 6 1 -1 7 1 -1 8 1 0 9 1 1 9 1 2 8 1 2 7 1 1 6 1 0 6 0 0 7 1 0 8 1 1 8 1 1 7 1 0 7", "-11 12 0 9 -16 1 -9 16 1 -8 16 0 9 -16 1 10 -16 1 -8 16", "-10 10 0 -1 -12 1 -4 -11 1 -6 -8 1 -7 -3 1 -7 0 1 -6 5 1 -4 8 1 -1 9 1 1 9 1 4 8 1 6 5 1 7 0 1 7 -3 1 6 -8 1 4 -11 1 1 -12 1 -1 -12 0 -3 -11 1 -5 -8 1 -6 -3 1 -6 0 1 -5 5 1 -3 8 0 -4 7 1 -1 8 1 1 8 1 4 7 0 3 8 1 5 5 1 6 0 1 6 -3 1 5 -8 1 3 -11 0 4 -10 1 1 -11 1 -1 -11 1 -4 -10", "-10 10 0 -4 -8 1 -2 -9 1 1 -12 1 1 9 0 -4 -8 1 -4 -7 1 -2 -8 1 0 -10 1 0 9 1 1 9", "-10 10 0 -6 -7 1 -6 -8 1 -5 -10 1 -4 -11 1 -2 -12 1 2 -12 1 4 -11 1 5 -10 1 6 -8 1 6 -6 1 5 -4 1 3 -1 1 -6 9 0 -6 -7 1 -5 -7 1 -5 -8 1 -4 -10 1 -2 -11 1 2 -11 1 4 -10 1 5 -8 1 5 -6 1 4 -4 1 2 -1 1 -7 9 0 -6 8 1 7 8 1 7 9 0 -7 9 1 7 9", "-10 10 0 -5 -12 1 6 -12 1 -1 -3 0 -5 -12 1 -5 -11 1 5 -11 0 5 -12 1 -2 -3 0 -1 -4 1 1 -4 1 4 -3 1 6 -1 1 7 2 1 7 3 1 6 6 1 4 8 1 1 9 1 -2 9 1 -5 8 1 -6 7 1 -7 5 1 -6 5 0 -2 -3 1 1 -3 1 4 -2 1 6 1 0 2 -3 1 5 -1 1 6 2 1 6 3 1 5 6 1 2 8 0 6 4 1 4 7 1 1 8 1 -2 8 1 -5 7 1 -6 5 0 -3 8 1 -6 6", "-10 10 0 3 -9 1 3 9 1 4 9 0 4 -12 1 4 9 0 4 -12 1 -7 4 1 8 4 0 3 -9 1 -6 4 0 -6 3 1 8 3 1 8 4", "-10 10 0 -5 -12 1 -6 -3 0 -4 -11 1 -5 -4 0 -5 -12 1 5 -12 1 5 -11 0 -4 -11 1 5 -11 0 -5 -4 1 -2 -5 1 1 -5 1 4 -4 1 6 -2 1 7 1 1 7 3 1 6 6 1 4 8 1 1 9 1 -2 9 1 -5 8 1 -6 7 1 -7 5 1 -6 5 0 -6 -3 1 -5 -3 1 -3 -4 1 1 -4 1 4 -3 1 6 0 0 2 -4 1 5 -2 1 6 1 1 6 3 1 5 6 1 2 8 0 6 4 1 4 7 1 1 8 1 -2 8 1 -5 7 1 -6 5 0 -3 8 1 -6 6", "-10 10 0 4 -11 1 5 -9 1 6 -9 1 5 -11 1 2 -12 1 0 -12 1 -3 -11 1 -5 -8 1 -6 -3 1 -6 2 1 -5 6 1 -3 8 1 0 9 1 1 9 1 4 8 1 6 6 1 7 3 1 7 2 1 6 -1 1 4 -3 1 1 -4 1 0 -4 1 -3 -3 1 -5 -1 0 5 -10 1 2 -11 1 0 -11 1 -3 -10 0 -2 -11 1 -4 -8 1 -5 -3 1 -5 2 1 -4 6 1 -1 8 0 -5 4 1 -3 7 1 0 8 1 1 8 1 4 7 1 6 4 0 2 8 1 5 6 1 6 3 1 6 2 1 5 -1 1 2 -3 0 6 1 1 4 -2 1 1 -3 1 0 -3 1 -3 -2 1 -5 1 0 -1 -3 1 -4 -1 1 -5 2", "-10 10 0 -7 -12 1 7 -12 1 -3 9 0 -7 -12 1 -7 -11 1 6 -11 0 6 -12 1 -4 9 1 -3 9", "-10 10 0 -2 -12 1 -5 -11 1 -6 -9 1 -6 -7 1 -5 -5 1 -4 -4 1 -2 -3 1 2 -2 1 4 -1 1 5 0 1 6 2 1 6 5 1 5 7 1 2 8 1 -2 8 1 -5 7 1 -6 5 1 -6 2 1 -5 0 1 -4 -1 1 -2 -2 1 2 -3 1 4 -4 1 5 -5 1 6 -7 1 6 -9 1 5 -11 1 2 -12 1 -2 -12 0 -4 -11 1 -5 -9 1 -5 -7 1 -4 -5 1 -2 -4 1 2 -3 1 4 -2 1 6 0 1 7 2 1 7 5 1 6 7 1 5 8 1 2 9 1 -2 9 1 -5 8 1 -6 7 1 -7 5 1 -7 2 1 -6 0 1 -4 -2 1 -2 -3 1 2 -4 1 4 -5 1 5 -7 1 5 -9 1 4 -11 0 5 -10 1 2 -11 1 -2 -11 1 -5 -10 0 -6 6 1 -3 8 0 3 8 1 6 6", "-10 10 0 5 -2 1 3 0 1 0 1 1 -1 1 1 -4 0 1 -6 -2 1 -7 -5 1 -7 -6 1 -6 -9 1 -4 -11 1 -1 -12 1 0 -12 1 3 -11 1 5 -9 1 6 -5 1 6 0 1 5 5 1 3 8 1 0 9 1 -2 9 1 -5 8 1 -6 6 1 -5 6 1 -4 8 0 5 -5 1 4 -2 1 1 0 0 5 -4 1 3 -1 1 0 0 1 -1 0 1 -4 -1 1 -6 -4 0 -2 0 1 -5 -2 1 -6 -5 1 -6 -6 1 -5 -9 1 -2 -11 0 -6 -7 1 -4 -10 1 -1 -11 1 0 -11 1 3 -10 1 5 -7 0 1 -11 1 4 -9 1 5 -5 1 5 0 1 4 5 1 2 8 0 3 7 1 0 8 1 -2 8 1 -5 7", "-5 6 0 0 -5 1 -1 -4 1 -1 -3 1 0 -2 1 1 -2 1 2 -3 1 2 -4 1 1 -5 1 0 -5 0 0 -4 1 0 -3 1 1 -3 1 1 -4 1 0 -4 0 0 6 1 -1 7 1 -1 8 1 0 9 1 1 9 1 2 8 1 2 7 1 1 6 1 0 6 0 0 7 1 0 8 1 1 8 1 1 7 1 0 7", "-5 6 0 0 -5 1 -1 -4 1 -1 -3 1 0 -2 1 1 -2 1 2 -3 1 2 -4 1 1 -5 1 0 -5 0 0 -4 1 0 -3 1 1 -3 1 1 -4 1 0 -4 0 2 8 1 1 9 1 0 9 1 -1 8 1 -1 7 1 0 6 1 1 6 1 2 7 1 2 10 1 1 12 1 -1 13 0 0 7 1 0 8 1 1 8 1 1 7 1 0 7 0 1 9 1 2 10 0 2 8 1 1 12", "-12 12 0 8 -9 1 -8 0 1 8 9", "-12 13 0 -8 -5 1 9 -5 1 9 -4 0 -8 -5 1 -8 -4 1 9 -4 0 -8 3 1 9 3 1 9 4 0 -8 3 1 -8 4 1 9 4", "-12 12 0 -8 -9 1 8 0 1 -8 9", "-9 10 0 -6 -7 1 -6 -8 1 -5 -10 1 -4 -11 1 -1 -12 1 2 -12 1 5 -11 1 6 -10 1 7 -8 1 7 -6 1 6 -4 1 5 -3 1 3 -2 1 0 -1 0 -6 -7 1 -5 -7 1 -5 -8 1 -4 -10 1 -1 -11 1 2 -11 1 5 -10 1 6 -8 1 6 -6 1 5 -4 1 3 -3 1 0 -2 0 -5 -9 1 -2 -11 0 3 -11 1 6 -9 0 6 -5 1 2 -2 0 0 -2 1 0 2 1 1 2 1 1 -2 0 0 6 1 -1 7 1 -1 8 1 0 9 1 1 9 1 2 8 1 2 7 1 1 6 1 0 6 0 0 7 1 0 8 1 1 8 1 1 7 1 0 7", "-13 14 0 5 -4 1 4 -6 1 2 -7 1 -1 -7 1 -3 -6 1 -4 -5 1 -5 -2 1 -5 1 1 -4 3 1 -2 4 1 1 4 1 3 3 1 4 1 0 -1 -7 1 -3 -5 1 -4 -2 1 -4 1 1 -3 3 1 -2 4 0 5 -7 1 4 1 1 4 3 1 6 4 1 8 4 1 10 2 1 11 -1 1 11 -3 1 10 -6 1 9 -8 1 7 -10 1 5 -11 1 2 -12 1 -1 -12 1 -4 -11 1 -6 -10 1 -8 -8 1 -9 -6 1 -10 -3 1 -10 0 1 -9 3 1 -8 5 1 -6 7 1 -4 8 1 -1 9 1 2 9 1 5 8 1 7 7 1 8 6 0 6 -7 1 5 1 1 5 3 1 6 4", "-10 10 0 0 -12 1 -8 9 0 0 -9 1 -7 9 1 -8 9 0 0 -9 1 7 9 1 8 9 0 0 -12 1 8 9 0 -5 3 1 5 3 0 -6 4 1 6 4", "-10 10 0 -6 -12 1 -6 9 0 -5 -11 1 -5 8 0 -6 -12 1 2 -12 1 5 -11 1 6 -10 1 7 -8 1 7 -5 1 6 -3 1 5 -2 1 2 -1 0 -5 -11 1 2 -11 1 5 -10 1 6 -8 1 6 -5 1 5 -3 1 2 -2 0 -5 -2 1 2 -2 1 5 -1 1 6 0 1 7 2 1 7 5 1 6 7 1 5 8 1 2 9 1 -6 9 0 -5 -1 1 2 -1 1 5 0 1 6 2 1 6 5 1 5 7 1 2 8 1 -5 8", "-10 11 0 8 -7 1 7 -9 1 5 -11 1 3 -12 1 -1 -12 1 -3 -11 1 -5 -9 1 -6 -7 1 -7 -4 1 -7 1 1 -6 4 1 -5 6 1 -3 8 1 -1 9 1 3 9 1 5 8 1 7 6 1 8 4 0 8 -7 1 7 -7 1 6 -9 1 5 -10 1 3 -11 1 -1 -11 1 -3 -10 1 -5 -7 1 -6 -4 1 -6 1 1 -5 4 1 -3 7 1 -1 8 1 3 8 1 5 7 1 6 6 1 7 4 1 8 4", "-10 11 0 -6 -12 1 -6 9 0 -5 -11 1 -5 8 0 -6 -12 1 1 -12 1 4 -11 1 6 -9 1 7 -7 1 8 -4 1 8 1 1 7 4 1 6 6 1 4 8 1 1 9 1 -6 9 0 -5 -11 1 1 -11 1 4 -10 1 5 -9 1 6 -7 1 7 -4 1 7 1 1 6 4 1 5 6 1 4 7 1 1 8 1 -5 8", "-9 10 0 -5 -12 1 -5 9 0 -4 -11 1 -4 8 0 -5 -12 1 7 -12 0 -4 -11 1 7 -11 1 7 -12 0 -4 -2 1 2 -2 1 2 -1 0 -4 -1 1 2 -1 0 -4 8 1 7 8 1 7 9 0 -5 9 1 7 9", "-9 9 0 -5 -12 1 -5 9 0 -4 -11 1 -4 9 1 -5 9 0 -5 -12 1 7 -12 0 -4 -11 1 7 -11 1 7 -12 0 -4 -2 1 2 -2 1 2 -1 0 -4 -1 1 2 -1", "-10 11 0 8 -7 1 7 -9 1 5 -11 1 3 -12 1 -1 -12 1 -3 -11 1 -5 -9 1 -6 -7 1 -7 -4 1 -7 1 1 -6 4 1 -5 6 1 -3 8 1 -1 9 1 3 9 1 5 8 1 7 6 1 8 4 1 8 0 1 3 0 0 8 -7 1 7 -7 1 6 -9 1 5 -10 1 3 -11 1 -1 -11 1 -3 -10 1 -4 -9 1 -5 -7 1 -6 -4 1 -6 1 1 -5 4 1 -4 6 1 -3 7 1 -1 8 1 3 8 1 5 7 1 6 6 1 7 4 1 7 1 1 3 1 1 3 0", "-11 11 0 -7 -12 1 -7 9 0 -7 -12 1 -6 -12 1 -6 9 1 -7 9 0 7 -12 1 6 -12 1 6 9 1 7 9 0 7 -12 1 7 9 0 -6 -2 1 6 -2 0 -6 -1 1 6 -1", "-4 5 0 0 -12 1 0 9 1 1 9 0 0 -12 1 1 -12 1 1 9", "-8 9 0 4 -12 1 4 4 1 3 7 1 1 8 1 -1 8 1 -3 7 1 -4 4 1 -5 4 0 4 -12 1 5 -12 1 5 4 1 4 7 1 3 8 1 1 9 1 -1 9 1 -3 8 1 -4 7 1 -5 4", "-10 11 0 -6 -12 1 -6 9 1 -5 9 0 -6 -12 1 -5 -12 1 -5 9 0 8 -12 1 7 -12 1 -5 0 0 8 -12 1 -5 1 0 -2 -3 1 7 9 1 8 9 0 -1 -3 1 8 9", "-9 8 0 -5 -12 1 -5 9 0 -5 -12 1 -4 -12 1 -4 8 0 -4 8 1 7 8 1 7 9 0 -5 9 1 7 9", "-12 12 0 -8 -12 1 -8 9 0 -7 -7 1 -7 9 1 -8 9 0 -7 -7 1 0 9 0 -8 -12 1 0 6 0 8 -12 1 0 6 0 7 -7 1 0 9 0 7 -7 1 7 9 1 8 9 0 8 -12 1 8 9", "-11 11 0 -7 -12 1 -7 9 0 -6 -9 1 -6 9 1 -7 9 0 -6 -9 1 7 9 0 -7 -12 1 6 6 0 6 -12 1 6 6 0 6 -12 1 7 -12 1 7 9", "-11 11 0 -2 -12 1 -4 -11 1 -6 -9 1 -7 -7 1 -8 -4 1 -8 1 1 -7 4 1 -6 6 1 -4 8 1 -2 9 1 2 9 1 4 8 1 6 6 1 7 4 1 8 1 1 8 -4 1 7 -7 1 6 -9 1 4 -11 1 2 -12 1 -2 -12 0 -1 -11 1 -4 -10 1 -6 -7 1 -7 -4 1 -7 1 1 -6 4 1 -4 7 1 -1 8 1 1 8 1 4 7 1 6 4 1 7 1 1 7 -4 1 6 -7 1 4 -10 1 1 -11 1 -1 -11", "-10 10 0 -6 -12 1 -6 9 0 -5 -11 1 -5 9 1 -6 9 0 -6 -12 1 3 -12 1 5 -11 1 6 -10 1 7 -8 1 7 -5 1 6 -3 1 5 -2 1 3 -1 1 -5 -1 0 -5 -11 1 3 -11 1 5 -10 1 6 -8 1 6 -5 1 5 -3 1 3 -2 1 -5 -2", "-11 11 0 -2 -12 1 -4 -11 1 -6 -9 1 -7 -7 1 -8 -4 1 -8 1 1 -7 4 1 -6 6 1 -4 8 1 -2 9 1 2 9 1 4 8 1 6 6 1 7 4 1 8 1 1 8 -4 1 7 -7 1 6 -9 1 4 -11 1 2 -12 1 -2 -12 0 -1 -11 1 -4 -10 1 -6 -7 1 -7 -4 1 -7 1 1 -6 4 1 -4 7 1 -1 8 1 1 8 1 4 7 1 6 4 1 7 1 1 7 -4 1 6 -7 1 4 -10 1 1 -11 1 -1 -11 0 1 6 1 6 11 1 7 11 0 1 6 1 2 6 1 7 11", "-10 10 0 -6 -12 1 -6 9 0 -5 -11 1 -5 9 1 -6 9 0 -6 -12 1 2 -12 1 5 -11 1 6 -10 1 7 -8 1 7 -5 1 6 -3 1 5 -2 1 2 -1 1 -5 -1 0 -5 -11 1 2 -11 1 5 -10 1 6 -8 1 6 -5 1 5 -3 1 2 -2 1 -5 -2 0 0 -1 1 6 9 1 7 9 0 1 -1 1 7 9", "-10 10 0 7 -9 1 5 -11 1 2 -12 1 -2 -12 1 -5 -11 1 -7 -9 1 -7 -7 1 -6 -5 1 -5 -4 1 -3 -3 1 2 -1 1 4 0 1 5 1 1 6 3 1 6 6 1 5 7 1 2 8 1 -2 8 1 -4 7 1 -5 6 1 -7 6 0 7 -9 1 5 -9 1 4 -10 1 2 -11 1 -2 -11 1 -5 -10 1 -6 -9 1 -6 -7 1 -5 -5 1 -3 -4 1 2 -2 1 4 -1 1 6 1 1 7 3 1 7 6 1 5 8 1 2 9 1 -2 9 1 -5 8 1 -7 6", "-8 9 0 0 -11 1 0 9 0 1 -11 1 1 9 1 0 9 0 -6 -12 1 7 -12 1 7 -11 0 -6 -12 1 -6 -11 1 7 -11", "-11 11 0 -7 -12 1 -7 3 1 -6 6 1 -4 8 1 -1 9 1 1 9 1 4 8 1 6 6 1 7 3 1 7 -12 0 -7 -12 1 -6 -12 1 -6 3 1 -5 6 1 -4 7 1 -1 8 1 1 8 1 4 7 1 5 6 1 6 3 1 6 -12 1 7 -12", "-10 10 0 -8 -12 1 0 9 0 -8 -12 1 -7 -12 1 0 6 0 8 -12 1 7 -12 1 0 6 0 8 -12 1 0 9", "-13 13 0 -11 -12 1 -5 9 0 -11 -12 1 -10 -12 1 -5 6 0 0 -12 1 -5 6 0 0 -9 1 -5 9 0 0 -9 1 5 9 0 0 -12 1 5 6 0 11 -12 1 10 -12 1 5 6 0 11 -12 1 5 9", "-10 10 0 -7 -12 1 6 9 1 7 9 0 -7 -12 1 -6 -12 1 7 9 0 7 -12 1 6 -12 1 -7 9 0 7 -12 1 -6 9 1 -7 9", "-9 10 0 -7 -12 1 0 -2 1 0 9 1 1 9 0 -7 -12 1 -6 -12 1 1 -2 0 8 -12 1 7 -12 1 0 -2 0 8 -12 1 1 -2 1 1 9", "-10 10 0 6 -12 1 -7 9 0 7 -12 1 -6 9 0 -7 -12 1 7 -12 0 -7 -12 1 -7 -11 1 6 -11 0 -6 8 1 7 8 1 7 9 0 -7 9 1 7 9", "-7 7 0 -3 -16 1 -3 16 0 -2 -16 1 -2 16 0 -3 -16 1 4 -16 0 -3 16 1 4 16", "-7 7 0 -7 -12 1 7 12", "-7 7 0 2 -16 1 2 16 0 3 -16 1 3 16 0 -4 -16 1 3 -16 0 -4 16 1 3 16", "-11 11 0 -8 2 1 0 -3 1 8 2 0 -8 2 1 0 -2 1 8 2", "-10 10 0 -10 16 1 10 16", "-6 6 0 -2 -12 1 3 -6 0 -2 -12 1 -3 -11 1 3 -6", "-10 10 0 5 -5 1 5 9 1 6 9 0 5 -5 1 6 -5 1 6 9 0 5 -2 1 3 -4 1 1 -5 1 -2 -5 1 -4 -4 1 -6 -2 1 -7 1 1 -7 3 1 -6 6 1 -4 8 1 -2 9 1 1 9 1 3 8 1 5 6 0 5 -2 1 1 -4 1 -2 -4 1 -4 -3 1 -5 -2 1 -6 1 1 -6 3 1 -5 6 1 -4 7 1 -2 8 1 1 8 1 5 6", "-10 10 0 -6 -12 1 -6 9 1 -5 9 0 -6 -12 1 -5 -12 1 -5 9 0 -5 -2 1 -3 -4 1 -1 -5 1 2 -5 1 4 -4 1 6 -2 1 7 1 1 7 3 1 6 6 1 4 8 1 2 9 1 -1 9 1 -3 8 1 -5 6 0 -5 -2 1 -1 -4 1 2 -4 1 4 -3 1 5 -2 1 6 1 1 6 3 1 5 6 1 4 7 1 2 8 1 -1 8 1 -5 6", "-9 9 0 6 -2 1 4 -4 1 2 -5 1 -1 -5 1 -3 -4 1 -5 -2 1 -6 1 1 -6 3 1 -5 6 1 -3 8 1 -1 9 1 2 9 1 4 8 1 6 6 0 6 -2 1 5 -1 1 4 -3 1 2 -4 1 -1 -4 1 -3 -3 1 -4 -2 1 -5 1 1 -5 3 1 -4 6 1 -3 7 1 -1 8 1 2 8 1 4 7 1 5 5 1 6 6", "-10 10 0 5 -12 1 5 9 1 6 9 0 5 -12 1 6 -12 1 6 9 0 5 -2 1 3 -4 1 1 -5 1 -2 -5 1 -4 -4 1 -6 -2 1 -7 1 1 -7 3 1 -6 6 1 -4 8 1 -2 9 1 1 9 1 3 8 1 5 6 0 5 -2 1 1 -4 1 -2 -4 1 -4 -3 1 -5 -2 1 -6 1 1 -6 3 1 -5 6 1 -4 7 1 -2 8 1 1 8 1 5 6", "-9 9 0 -5 2 1 6 2 1 6 -1 1 5 -3 1 4 -4 1 2 -5 1 -1 -5 1 -3 -4 1 -5 -2 1 -6 1 1 -6 3 1 -5 6 1 -3 8 1 -1 9 1 2 9 1 4 8 1 6 6 0 -5 1 1 5 1 1 5 -1 1 4 -3 1 2 -4 1 -1 -4 1 -3 -3 1 -4 -2 1 -5 1 1 -5 3 1 -4 6 1 -3 7 1 -1 8 1 2 8 1 4 7 1 5 5 1 6 6", "-6 8 0 5 -12 1 3 -12 1 1 -11 1 0 -8 1 0 9 1 1 9 0 5 -12 1 5 -11 1 3 -11 1 1 -10 0 2 -11 1 1 -8 1 1 9 0 -3 -5 1 4 -5 1 4 -4 0 -3 -5 1 -3 -4 1 4 -4", "-10 10 0 6 -5 1 5 -5 1 5 10 1 4 13 1 3 14 1 1 15 1 -1 15 1 -3 14 1 -4 13 1 -6 13 0 6 -5 1 6 10 1 5 13 1 3 15 1 1 16 1 -2 16 1 -4 15 1 -6 13 0 5 -2 1 3 -4 1 1 -5 1 -2 -5 1 -4 -4 1 -6 -2 1 -7 1 1 -7 3 1 -6 6 1 -4 8 1 -2 9 1 1 9 1 3 8 1 5 6 0 5 -2 1 1 -4 1 -2 -4 1 -4 -3 1 -5 -2 1 -6 1 1 -6 3 1 -5 6 1 -4 7 1 -2 8 1 1 8 1 5 6", "-10 10 0 -6 -12 1 -6 9 1 -5 9 0 -6 -12 1 -5 -12 1 -5 9 0 -5 -1 1 -2 -4 1 0 -5 1 3 -5 1 5 -4 1 6 -1 1 6 9 0 -5 -1 1 -2 -3 1 0 -4 1 2 -4 1 4 -3 1 5 -1 1 5 9 1 6 9", "-4 5 0 0 -12 1 -1 -11 1 -1 -10 1 0 -9 1 1 -9 1 2 -10 1 2 -11 1 1 -12 1 0 -12 0 0 -11 1 0 -10 1 1 -10 1 1 -11 1 0 -11 0 0 -5 1 0 9 1 1 9 0 0 -5 1 1 -5 1 1 9", "-4 5 0 0 -12 1 -1 -11 1 -1 -10 1 0 -9 1 1 -9 1 2 -10 1 2 -11 1 1 -12 1 0 -12 0 0 -11 1 0 -10 1 1 -10 1 1 -11 1 0 -11 0 0 -5 1 0 16 1 1 16 0 0 -5 1 1 -5 1 1 16", "-10 9 0 -6 -12 1 -6 9 1 -5 9 0 -6 -12 1 -5 -12 1 -5 9 0 6 -5 1 5 -5 1 -5 5 0 6 -5 1 -5 6 0 -2 2 1 4 9 1 6 9 0 -1 1 1 6 9", "-4 5 0 0 -12 1 0 9 1 1 9 0 0 -12 1 1 -12 1 1 9", "-15 16 0 -11 -5 1 -11 9 1 -10 9 0 -11 -5 1 -10 -5 1 -10 9 0 -10 -1 1 -7 -4 1 -5 -5 1 -2 -5 1 0 -4 1 1 -1 1 1 9 0 -10 -1 1 -7 -3 1 -5 -4 1 -3 -4 1 -1 -3 1 0 -1 1 0 9 1 1 9 0 1 -1 1 4 -4 1 6 -5 1 9 -5 1 11 -4 1 12 -1 1 12 9 0 1 -1 1 4 -3 1 6 -4 1 8 -4 1 10 -3 1 11 -1 1 11 9 1 12 9", "-10 10 0 -6 -5 1 -6 9 1 -5 9 0 -6 -5 1 -5 -5 1 -5 9 0 -5 -1 1 -2 -4 1 0 -5 1 3 -5 1 5 -4 1 6 -1 1 6 9 0 -5 -1 1 -2 -3 1 0 -4 1 2 -4 1 4 -3 1 5 -1 1 5 9 1 6 9", "-9 10 0 -1 -5 1 -3 -4 1 -5 -2 1 -6 1 1 -6 3 1 -5 6 1 -3 8 1 -1 9 1 2 9 1 4 8 1 6 6 1 7 3 1 7 1 1 6 -2 1 4 -4 1 2 -5 1 -1 -5 0 -1 -4 1 -3 -3 1 -4 -2 1 -5 1 1 -5 3 1 -4 6 1 -3 7 1 -1 8 1 2 8 1 4 7 1 5 6 1 6 3 1 6 1 1 5 -2 1 4 -3 1 2 -4 1 -1 -4", "-10 10 0 -6 -5 1 -6 16 1 -5 16 0 -6 -5 1 -5 -5 1 -5 16 0 -5 -2 1 -3 -4 1 -1 -5 1 2 -5 1 4 -4 1 6 -2 1 7 1 1 7 3 1 6 6 1 4 8 1 2 9 1 -1 9 1 -3 8 1 -5 6 0 -5 -2 1 -1 -4 1 2 -4 1 4 -3 1 5 -2 1 6 1 1 6 3 1 5 6 1 4 7 1 2 8 1 -1 8 1 -5 6", "-10 10 0 5 -5 1 5 16 1 6 16 0 5 -5 1 6 -5 1 6 16 0 5 -2 1 3 -4 1 1 -5 1 -2 -5 1 -4 -4 1 -6 -2 1 -7 1 1 -7 3 1 -6 6 1 -4 8 1 -2 9 1 1 9 1 3 8 1 5 6 0 5 -2 1 1 -4 1 -2 -4 1 -4 -3 1 -5 -2 1 -6 1 1 -6 3 1 -5 6 1 -4 7 1 -2 8 1 1 8 1 5 6", "-7 7 0 -3 -5 1 -3 9 1 -2 9 0 -3 -5 1 -2 -5 1 -2 9 0 -2 1 1 -1 -2 1 1 -4 1 3 -5 1 6 -5 0 -2 1 1 -1 -1 1 1 -3 1 3 -4 1 6 -4 1 6 -5", "-8 9 0 6 -2 1 5 -4 1 2 -5 1 -1 -5 1 -4 -4 1 -5 -2 1 -4 0 1 -2 1 1 3 3 1 5 4 0 4 3 1 5 5 1 5 6 1 4 8 0 5 7 1 2 8 1 -1 8 1 -4 7 0 -3 8 1 -4 6 1 -5 6 0 6 -2 1 5 -2 1 4 -4 0 5 -3 1 2 -4 1 -1 -4 1 -4 -3 0 -3 -4 1 -4 -2 1 -3 0 0 -4 -1 1 -2 0 1 3 2 1 5 3 1 6 5 1 6 6 1 5 8 1 2 9 1 -1 9 1 -4 8 1 -5 6", "-5 6 0 0 -12 1 0 9 1 1 9 0 0 -12 1 1 -12 1 1 9 0 -3 -5 1 4 -5 1 4 -4 0 -3 -5 1 -3 -4 1 4 -4", "-10 10 0 -6 -5 1 -6 5 1 -5 8 1 -3 9 1 0 9 1 2 8 1 5 5 0 -6 -5 1 -5 -5 1 -5 5 1 -4 7 1 -2 8 1 0 8 1 2 7 1 5 5 0 5 -5 1 5 9 1 6 9 0 5 -5 1 6 -5 1 6 9", "-8 8 0 -6 -5 1 0 9 0 -6 -5 1 -5 -5 1 0 7 0 6 -5 1 5 -5 1 0 7 0 6 -5 1 0 9", "-12 12 0 -9 -5 1 -4 9 0 -9 -5 1 -8 -5 1 -4 6 0 0 -5 1 -4 6 0 0 -2 1 -4 9 0 0 -2 1 4 9 0 0 -5 1 4 6 0 9 -5 1 8 -5 1 4 6 0 9 -5 1 4 9", "-9 9 0 -6 -5 1 5 9 1 6 9 0 -6 -5 1 -5 -5 1 6 9 0 6 -5 1 5 -5 1 -6 9 0 6 -5 1 -5 9 1 -6 9", "-8 8 0 -6 -5 1 0 9 0 -6 -5 1 -5 -5 1 0 7 0 6 -5 1 5 -5 1 0 7 1 -4 16 0 6 -5 1 0 9 1 -3 16 1 -4 16", "-9 9 0 4 -4 1 -6 9 0 6 -5 1 -4 8 0 -6 -5 1 6 -5 0 -6 -5 1 -6 -4 1 4 -4 0 -4 8 1 6 8 1 6 9 0 -6 9 1 6 9", "-7 7 0 3 -16 1 -4 0 1 3 16", "-4 4 0 0 -16 1 0 16", "-7 7 0 -3 -16 1 4 0 1 -3 16", "-12 12 0 -9 3 1 -9 1 1 -8 -2 1 -6 -3 1 -4 -3 1 -2 -2 1 2 1 1 4 2 1 6 2 1 8 1 1 9 -1 0 -9 1 1 -8 -1 1 -6 -2 1 -4 -2 1 -2 -1 1 2 2 1 4 3 1 6 3 1 8 2 1 9 -1 1 9 -3", "-8 8 0 -8 -12 1 -8 9 1 -7 9 1 -7 -12 1 -6 -12 1 -6 9 1 -5 9 1 -5 -12 1 -4 -12 1 -4 9 1 -3 9 1 -3 -12 1 -2 -12 1 -2 9 1 -1 9 1 -1 -12 1 0 -12 1 0 9 1 1 9 1 1 -12 1 2 -12 1 2 9 1 3 9 1 3 -12 1 4 -12 1 4 9 1 5 9 1 5 -12 1 6 -12 1 6 9 1 7 9 1 7 -12 1 8 -12 1 8 9" };
        string[] cursive = { "-8 8", "-5 5 0 0 -12 1 0 2 0 0 7 1 -1 8 1 0 9 1 1 8 1 0 7", "-8 8 0 -4 -12 1 -4 -5 0 4 -12 1 4 -5", "-10 11 0 1 -16 1 -6 16 0 7 -16 1 0 16 0 -6 -3 1 8 -3 0 -7 3 1 7 3", "-10 10 0 -2 -16 1 -2 13 0 2 -16 1 2 13 0 7 -9 1 5 -11 1 2 -12 1 -2 -12 1 -5 -11 1 -7 -9 1 -7 -7 1 -6 -5 1 -5 -4 1 -3 -3 1 3 -1 1 5 0 1 6 1 1 7 3 1 7 6 1 5 8 1 2 9 1 -2 9 1 -5 8 1 -7 6", "-12 12 0 9 -12 1 -9 9 0 -4 -12 1 -2 -10 1 -2 -8 1 -3 -6 1 -5 -5 1 -7 -5 1 -9 -7 1 -9 -9 1 -8 -11 1 -6 -12 1 -4 -12 1 -2 -11 1 1 -10 1 4 -10 1 7 -11 1 9 -12 0 5 2 1 3 3 1 2 5 1 2 7 1 4 9 1 6 9 1 8 8 1 9 6 1 9 4 1 7 2 1 5 2", "-13 13 0 10 -3 1 10 -4 1 9 -5 1 8 -5 1 7 -4 1 6 -2 1 4 3 1 2 6 1 0 8 1 -2 9 1 -6 9 1 -8 8 1 -9 7 1 -10 5 1 -10 3 1 -9 1 1 -8 0 1 -1 -4 1 0 -5 1 1 -7 1 1 -9 1 0 -11 1 -2 -12 1 -4 -11 1 -5 -9 1 -5 -7 1 -4 -4 1 -2 -1 1 3 6 1 5 8 1 7 9 1 9 9 1 10 8 1 10 7", "-2 2 0 0 -5 1 0 -1", "-7 7 0 4 -16 1 2 -14 1 0 -11 1 -2 -7 1 -3 -2 1 -3 2 1 -2 7 1 0 11 1 2 14 1 4 16", "-7 7 0 -4 -16 1 -2 -14 1 0 -11 1 2 -7 1 3 -2 1 3 2 1 2 7 1 0 11 1 -2 14 1 -4 16", "-8 8 0 0 -6 1 0 6 0 -5 -3 1 5 3 0 5 -3 1 -5 3", "-13 13 0 0 -9 1 0 9 0 -9 0 1 9 0", "-4 4 0 1 5 1 0 6 1 -1 5 1 0 4 1 1 5 1 1 7 1 -1 9", "-13 13 0 -9 0 1 9 0", "-4 4 0 0 4 1 -1 5 1 0 6 1 1 5 1 0 4", "-11 11 0 9 -16 1 -9 16", "-10 10 0 -1 -12 1 -4 -11 1 -6 -8 1 -7 -3 1 -7 0 1 -6 5 1 -4 8 1 -1 9 1 1 9 1 4 8 1 6 5 1 7 0 1 7 -3 1 6 -8 1 4 -11 1 1 -12 1 -1 -12", "-10 10 0 -4 -8 1 -2 -9 1 1 -12 1 1 9", "-10 10 0 -6 -7 1 -6 -8 1 -5 -10 1 -4 -11 1 -2 -12 1 2 -12 1 4 -11 1 5 -10 1 6 -8 1 6 -6 1 5 -4 1 3 -1 1 -7 9 1 7 9", "-10 10 0 -5 -12 1 6 -12 1 0 -4 1 3 -4 1 5 -3 1 6 -2 1 7 1 1 7 3 1 6 6 1 4 8 1 1 9 1 -2 9 1 -5 8 1 -6 7 1 -7 5", "-10 10 0 3 -12 1 -7 2 1 8 2 0 3 -12 1 3 9", "-10 10 0 5 -12 1 -5 -12 1 -6 -3 1 -5 -4 1 -2 -5 1 1 -5 1 4 -4 1 6 -2 1 7 1 1 7 3 1 6 6 1 4 8 1 1 9 1 -2 9 1 -5 8 1 -6 7 1 -7 5", "-10 10 0 6 -9 1 5 -11 1 2 -12 1 0 -12 1 -3 -11 1 -5 -8 1 -6 -3 1 -6 2 1 -5 6 1 -3 8 1 0 9 1 1 9 1 4 8 1 6 6 1 7 3 1 7 2 1 6 -1 1 4 -3 1 1 -4 1 0 -4 1 -3 -3 1 -5 -1 1 -6 2", "-10 10 0 7 -12 1 -3 9 0 -7 -12 1 7 -12", "-10 10 0 -2 -12 1 -5 -11 1 -6 -9 1 -6 -7 1 -5 -5 1 -3 -4 1 1 -3 1 4 -2 1 6 0 1 7 2 1 7 5 1 6 7 1 5 8 1 2 9 1 -2 9 1 -5 8 1 -6 7 1 -7 5 1 -7 2 1 -6 0 1 -4 -2 1 -1 -3 1 3 -4 1 5 -5 1 6 -7 1 6 -9 1 5 -11 1 2 -12 1 -2 -12", "-10 10 0 6 -5 1 5 -2 1 3 0 1 0 1 1 -1 1 1 -4 0 1 -6 -2 1 -7 -5 1 -7 -6 1 -6 -9 1 -4 -11 1 -1 -12 1 0 -12 1 3 -11 1 5 -9 1 6 -5 1 6 0 1 5 5 1 3 8 1 0 9 1 -2 9 1 -5 8 1 -6 6", "-4 4 0 0 -3 1 -1 -2 1 0 -1 1 1 -2 1 0 -3 0 0 4 1 -1 5 1 0 6 1 1 5 1 0 4", "-4 4 0 0 -3 1 -1 -2 1 0 -1 1 1 -2 1 0 -3 0 1 5 1 0 6 1 -1 5 1 0 4 1 1 5 1 1 7 1 -1 9", "-12 12 0 8 -9 1 -8 0 1 8 9", "-13 13 0 -9 -3 1 9 -3 0 -9 3 1 9 3", "-12 12 0 -8 -9 1 8 0 1 -8 9", "-9 9 0 -6 -7 1 -6 -8 1 -5 -10 1 -4 -11 1 -2 -12 1 2 -12 1 4 -11 1 5 -10 1 6 -8 1 6 -6 1 5 -4 1 4 -3 1 0 -1 1 0 2 0 0 7 1 -1 8 1 0 9 1 1 8 1 0 7", "-13 14 0 5 -4 1 4 -6 1 2 -7 1 -1 -7 1 -3 -6 1 -4 -5 1 -5 -2 1 -5 1 1 -4 3 1 -2 4 1 1 4 1 3 3 1 4 1 0 -1 -7 1 -3 -5 1 -4 -2 1 -4 1 1 -3 3 1 -2 4 0 5 -7 1 4 1 1 4 3 1 6 4 1 8 4 1 10 2 1 11 -1 1 11 -3 1 10 -6 1 9 -8 1 7 -10 1 5 -11 1 2 -12 1 -1 -12 1 -4 -11 1 -6 -10 1 -8 -8 1 -9 -6 1 -10 -3 1 -10 0 1 -9 3 1 -8 5 1 -6 7 1 -4 8 1 -1 9 1 2 9 1 5 8 1 7 7 1 8 6 0 6 -7 1 5 1 1 5 3 1 6 4", "-11 9 0 -11 9 1 -9 8 1 -6 5 1 -3 1 1 1 -6 1 4 -12 1 4 9 1 3 6 1 1 3 1 -1 1 1 -4 -1 1 -6 -1 1 -7 0 1 -7 2 1 -6 4 1 -4 6 1 -1 8 1 2 9 1 7 9", "-12 11 0 1 -10 1 2 -9 1 2 -6 1 1 -2 1 0 1 1 -1 3 1 -3 6 1 -5 8 1 -7 9 1 -8 9 1 -9 8 1 -9 5 1 -8 0 1 -7 -3 1 -6 -5 1 -4 -8 1 -2 -10 1 0 -11 1 3 -12 1 6 -12 1 8 -11 1 9 -9 1 9 -7 1 8 -5 1 7 -4 1 5 -3 1 2 -2 0 1 -2 1 2 -2 1 5 -1 1 6 0 1 7 2 1 7 5 1 6 7 1 5 8 1 3 9 1 0 9 1 -2 8 1 -3 6", "-10 10 0 2 -6 1 2 -5 1 3 -4 1 5 -4 1 7 -5 1 8 -7 1 8 -9 1 7 -11 1 5 -12 1 2 -12 1 -1 -11 1 -3 -9 1 -5 -6 1 -6 -4 1 -7 0 1 -7 4 1 -6 7 1 -5 8 1 -3 9 1 -1 9 1 2 8 1 4 6 1 5 4", "-11 12 0 2 -12 1 0 -11 1 -1 -9 1 -2 -5 1 -3 1 1 -4 4 1 -5 6 1 -7 8 1 -9 9 1 -11 9 1 -12 8 1 -12 6 1 -11 5 1 -9 5 1 -7 6 1 -5 8 1 -2 9 1 1 9 1 4 8 1 6 6 1 8 2 1 9 -3 1 9 -7 1 8 -10 1 7 -11 1 5 -12 1 2 -12 1 0 -10 1 0 -8 1 1 -5 1 3 -2 1 5 0 1 8 2 1 10 3", "-10 10 0 4 -8 1 4 -7 1 5 -6 1 7 -6 1 8 -7 1 8 -9 1 7 -11 1 4 -12 1 0 -12 1 -3 -11 1 -4 -9 1 -4 -6 1 -3 -4 1 -2 -3 1 1 -2 1 -2 -2 1 -5 -1 1 -6 0 1 -7 2 1 -7 5 1 -6 7 1 -5 8 1 -2 9 1 1 9 1 4 8 1 6 6 1 7 4", "-10 10 0 0 -6 1 -2 -6 1 -4 -7 1 -5 -9 1 -4 -11 1 -1 -12 1 2 -12 1 6 -11 1 9 -11 1 11 -12 0 6 -11 1 4 -4 1 2 2 1 0 6 1 -2 8 1 -4 9 1 -6 9 1 -8 8 1 -9 6 1 -9 4 1 -8 3 1 -6 3 1 -4 4 0 -1 -2 1 8 -2", "-11 12 0 -11 9 1 -9 8 1 -5 4 1 -2 -1 1 -1 -4 1 0 -8 1 0 -11 1 -1 -12 1 -2 -12 1 -3 -11 1 -4 -9 1 -4 -6 1 -3 -4 1 -1 -3 1 3 -3 1 6 -4 1 7 -5 1 8 -7 1 8 -1 1 7 4 1 6 6 1 4 8 1 1 9 1 -3 9 1 -6 8 1 -8 6 1 -9 4 1 -9 2", "-12 12 0 -5 -5 1 -7 -6 1 -8 -8 1 -8 -9 1 -7 -11 1 -5 -12 1 -4 -12 1 -2 -11 1 -1 -9 1 -1 -7 1 -2 -3 1 -4 3 1 -6 7 1 -8 9 1 -10 9 1 -11 8 1 -11 6 0 -5 0 1 4 -3 1 6 -4 1 9 -6 1 11 -8 1 12 -10 1 12 -11 1 11 -12 1 10 -12 1 8 -10 1 6 -6 1 4 0 1 3 5 1 3 8 1 4 9 1 5 9 1 7 8 1 8 7 1 10 4", "-9 8 0 5 4 1 3 2 1 1 -1 1 0 -3 1 -1 -6 1 -1 -9 1 0 -11 1 1 -12 1 3 -12 1 4 -11 1 5 -9 1 5 -6 1 4 -1 1 2 4 1 1 6 1 -1 8 1 -3 9 1 -5 9 1 -7 8 1 -8 6 1 -8 4 1 -7 3 1 -5 3 1 -3 4", "-8 7 0 2 12 1 0 9 1 -2 4 1 -3 -2 1 -3 -8 1 -2 -11 1 0 -12 1 2 -12 1 3 -11 1 4 -8 1 4 -5 1 3 0 1 0 9 1 -2 15 1 -3 18 1 -4 20 1 -6 21 1 -7 20 1 -7 18 1 -6 15 1 -4 12 1 -2 10 1 1 8 1 5 6", "-12 12 0 -5 -5 1 -7 -6 1 -8 -8 1 -8 -9 1 -7 -11 1 -5 -12 1 -4 -12 1 -2 -11 1 -1 -9 1 -1 -7 1 -2 -3 1 -4 3 1 -6 7 1 -8 9 1 -10 9 1 -11 8 1 -11 6 0 12 -9 1 12 -11 1 11 -12 1 10 -12 1 8 -11 1 6 -9 1 4 -6 1 2 -4 1 0 -3 1 -2 -3 0 0 -3 1 1 -1 1 1 6 1 2 8 1 3 9 1 4 9 1 6 8 1 7 7 1 9 4", "-9 10 0 -5 0 1 -3 0 1 1 -1 1 4 -3 1 6 -5 1 7 -7 1 7 -10 1 6 -12 1 4 -12 1 3 -11 1 2 -9 1 1 -4 1 0 1 1 -1 4 1 -2 6 1 -4 8 1 -6 9 1 -8 9 1 -9 8 1 -9 6 1 -8 5 1 -6 5 1 -4 6 1 -1 8 1 2 9 1 4 9 1 7 8 1 9 6", "-18 15 0 -13 -5 1 -15 -6 1 -16 -8 1 -16 -9 1 -15 -11 1 -13 -12 1 -12 -12 1 -10 -11 1 -9 -9 1 -9 -7 1 -10 -2 1 -11 2 1 -13 9 0 -11 2 1 -8 -6 1 -6 -10 1 -5 -11 1 -3 -12 1 -2 -12 1 0 -11 1 1 -9 1 1 -7 1 0 -2 1 -1 2 1 -3 9 0 -1 2 1 2 -6 1 4 -10 1 5 -11 1 7 -12 1 8 -12 1 10 -11 1 11 -9 1 11 -7 1 10 -2 1 8 5 1 8 8 1 9 9 1 10 9 1 12 8 1 13 7 1 15 4", "-13 11 0 -8 -5 1 -10 -6 1 -11 -8 1 -11 -9 1 -10 -11 1 -8 -12 1 -7 -12 1 -5 -11 1 -4 -9 1 -4 -7 1 -5 -2 1 -6 2 1 -8 9 0 -6 2 1 -3 -6 1 -1 -10 1 0 -11 1 2 -12 1 4 -12 1 6 -11 1 7 -9 1 7 -7 1 6 -2 1 4 5 1 4 8 1 5 9 1 6 9 1 8 8 1 9 7 1 11 4", "-10 11 0 2 -12 1 -1 -11 1 -3 -9 1 -5 -6 1 -6 -4 1 -7 0 1 -7 4 1 -6 7 1 -5 8 1 -3 9 1 -1 9 1 2 8 1 4 6 1 6 3 1 7 1 1 8 -3 1 8 -7 1 7 -10 1 6 -11 1 4 -12 1 2 -12 1 0 -10 1 0 -7 1 1 -4 1 3 -1 1 5 1 1 8 3 1 10 4", "-12 13 0 1 -10 1 2 -9 1 2 -6 1 1 -2 1 0 1 1 -1 3 1 -3 6 1 -5 8 1 -7 9 1 -8 9 1 -9 8 1 -9 5 1 -8 0 1 -7 -3 1 -6 -5 1 -4 -8 1 -2 -10 1 0 -11 1 3 -12 1 8 -12 1 10 -11 1 11 -10 1 12 -8 1 12 -5 1 11 -3 1 10 -2 1 8 -1 1 5 -1 1 3 -2 1 2 -3", "-10 12 0 3 -6 1 2 -4 1 1 -3 1 -1 -2 1 -3 -2 1 -4 -4 1 -4 -6 1 -3 -9 1 -1 -11 1 2 -12 1 5 -12 1 7 -11 1 8 -9 1 8 -5 1 7 -2 1 5 1 1 1 5 1 -2 7 1 -4 8 1 -7 9 1 -9 9 1 -10 8 1 -10 6 1 -9 5 1 -7 5 1 -5 6 1 -2 8 1 1 9 1 4 9 1 7 8 1 9 6", "-12 13 0 1 -10 1 2 -9 1 2 -6 1 1 -2 1 0 1 1 -1 3 1 -3 6 1 -5 8 1 -7 9 1 -8 9 1 -9 8 1 -9 5 1 -8 0 1 -7 -3 1 -6 -5 1 -4 -8 1 -2 -10 1 0 -11 1 3 -12 1 7 -12 1 9 -11 1 10 -10 1 11 -8 1 11 -5 1 10 -3 1 9 -2 1 7 -1 1 4 -1 1 1 -2 1 2 -1 1 3 1 1 3 6 1 4 8 1 6 9 1 8 8 1 9 7 1 11 4", "-10 10 0 -10 9 1 -8 8 1 -6 6 1 -3 2 1 -1 -1 1 1 -5 1 2 -8 1 2 -11 1 1 -12 1 0 -12 1 -1 -11 1 -2 -9 1 -2 -7 1 -1 -5 1 1 -3 1 4 -1 1 6 1 1 7 3 1 7 5 1 6 7 1 5 8 1 2 9 1 -2 9 1 -5 8 1 -7 6 1 -8 4 1 -8 2", "-10 9 0 0 -6 1 -2 -6 1 -4 -7 1 -5 -9 1 -4 -11 1 -1 -12 1 2 -12 1 6 -11 1 9 -11 1 11 -12 0 6 -11 1 4 -4 1 2 2 1 0 6 1 -2 8 1 -4 9 1 -6 9 1 -8 8 1 -9 6 1 -9 4 1 -8 3 1 -6 3 1 -4 4", "-13 11 0 -8 -5 1 -10 -6 1 -11 -8 1 -11 -9 1 -10 -11 1 -8 -12 1 -7 -12 1 -5 -11 1 -4 -9 1 -4 -7 1 -5 -3 1 -6 0 1 -7 4 1 -7 6 1 -6 8 1 -4 9 1 -2 9 1 0 8 1 1 7 1 3 3 1 6 -5 1 8 -12 0 6 -5 1 5 -1 1 4 5 1 4 8 1 5 9 1 6 9 1 8 8 1 9 7 1 11 4", "-12 11 0 -7 -5 1 -9 -6 1 -10 -8 1 -10 -9 1 -9 -11 1 -7 -12 1 -6 -12 1 -4 -11 1 -3 -9 1 -3 -7 1 -4 -3 1 -5 0 1 -6 4 1 -6 7 1 -5 9 1 -3 9 1 -1 8 1 2 5 1 4 2 1 6 -2 1 7 -5 1 8 -9 1 8 -11 1 7 -12 1 6 -12 1 5 -11 1 4 -9 1 4 -7 1 5 -4 1 7 -2 1 9 -1", "-15 13 0 -10 -5 1 -12 -6 1 -13 -8 1 -13 -9 1 -12 -11 1 -10 -12 1 -9 -12 1 -7 -11 1 -6 -9 1 -6 -6 1 -7 9 0 3 -12 1 -7 9 0 3 -12 1 1 9 0 15 -12 1 13 -11 1 10 -8 1 7 -4 1 4 2 1 1 9", "-12 12 0 -4 -6 1 -6 -6 1 -7 -7 1 -7 -9 1 -6 -11 1 -4 -12 1 -2 -12 1 0 -11 1 1 -9 1 1 -6 1 -1 3 1 -1 6 1 0 8 1 2 9 1 4 9 1 6 8 1 7 6 1 7 4 1 6 3 1 4 3 0 11 -9 1 11 -11 1 10 -12 1 8 -12 1 6 -11 1 4 -9 1 2 -6 1 -2 3 1 -4 6 1 -6 8 1 -8 9 1 -10 9 1 -11 8 1 -11 6", "-12 11 0 -7 -5 1 -9 -6 1 -10 -8 1 -10 -9 1 -9 -11 1 -7 -12 1 -6 -12 1 -4 -11 1 -3 -9 1 -3 -7 1 -4 -3 1 -5 0 1 -6 4 1 -6 6 1 -5 8 1 -4 9 1 -2 9 1 0 8 1 2 6 1 4 3 1 5 1 1 7 -5 0 9 -12 1 7 -5 1 4 5 1 2 11 1 0 16 1 -2 20 1 -4 21 1 -5 20 1 -5 18 1 -4 15 1 -2 12 1 1 9 1 4 7 1 9 4", "-10 11 0 3 -6 1 2 -4 1 1 -3 1 -1 -2 1 -3 -2 1 -4 -4 1 -4 -6 1 -3 -9 1 -1 -11 1 2 -12 1 5 -12 1 7 -11 1 8 -9 1 8 -5 1 7 -2 1 5 2 1 2 5 1 -2 8 1 -4 9 1 -7 9 1 -8 8 1 -8 6 1 -7 5 1 -4 5 1 -2 6 1 -1 7 1 0 9 1 0 12 1 -1 15 1 -2 17 1 -4 20 1 -6 21 1 -7 20 1 -7 18 1 -6 15 1 -4 12 1 -1 9 1 2 7 1 8 4", "-7 7 0 -3 -16 1 -3 16 0 -2 -16 1 -2 16 0 -3 -16 1 4 -16 0 -3 16 1 4 16", "-7 7 0 -7 -12 1 7 12", "-7 7 0 2 -16 1 2 16 0 3 -16 1 3 16 0 -4 -16 1 3 -16 0 -4 16 1 3 16", "-8 8 0 0 -14 1 -8 0 0 0 -14 1 8 0", "-11 9 0 -11 16 1 9 16", "-4 4 0 1 -7 1 -1 -5 1 -1 -3 1 0 -2 1 1 -3 1 0 -4 1 -1 -3", "-6 10 0 3 3 1 2 1 1 0 0 1 -2 0 1 -4 1 1 -5 2 1 -6 4 1 -6 6 1 -5 8 1 -3 9 1 -1 9 1 1 8 1 2 6 1 4 0 1 3 5 1 3 8 1 4 9 1 5 9 1 7 8 1 8 7 1 10 4", "-5 9 0 -5 4 1 -3 1 1 0 -4 1 1 -6 1 2 -9 1 2 -11 1 1 -12 1 -1 -11 1 -2 -9 1 -3 -5 1 -4 2 1 -4 8 1 -3 9 1 -2 9 1 0 8 1 2 6 1 3 3 1 3 0 1 4 4 1 5 5 1 7 5 1 9 4", "-5 6 0 2 2 1 2 1 1 1 0 1 -1 0 1 -3 1 1 -4 2 1 -5 4 1 -5 6 1 -4 8 1 -2 9 1 1 9 1 4 7 1 6 4", "-6 10 0 3 3 1 2 1 1 0 0 1 -2 0 1 -4 1 1 -5 2 1 -6 4 1 -6 6 1 -5 8 1 -3 9 1 -1 9 1 1 8 1 2 6 1 8 -12 0 4 0 1 3 5 1 3 8 1 4 9 1 5 9 1 7 8 1 8 7 1 10 4", "-4 6 0 -3 7 1 -1 6 1 0 5 1 1 3 1 1 1 1 0 0 1 -1 0 1 -3 1 1 -4 3 1 -4 6 1 -3 8 1 -1 9 1 1 9 1 3 8 1 4 7 1 6 4", "-3 5 0 -3 4 1 1 -1 1 3 -4 1 4 -6 1 5 -9 1 5 -11 1 4 -12 1 2 -11 1 1 -9 1 -1 -1 1 -4 8 1 -7 15 1 -8 18 1 -8 20 1 -7 21 1 -5 20 1 -4 17 1 -3 8 1 -2 9 1 0 9 1 2 8 1 3 7 1 5 4", "-6 9 0 3 3 1 2 1 1 0 0 1 -2 0 1 -4 1 1 -5 2 1 -6 4 1 -6 6 1 -5 8 1 -3 9 1 -1 9 1 1 8 1 2 7 0 4 0 1 2 7 1 -2 18 1 -3 20 1 -5 21 1 -6 20 1 -6 18 1 -5 15 1 -2 12 1 1 10 1 3 9 1 6 7 1 9 4", "-5 10 0 -5 4 1 -3 1 1 0 -4 1 1 -6 1 2 -9 1 2 -11 1 1 -12 1 -1 -11 1 -2 -9 1 -3 -5 1 -4 1 1 -5 9 0 -5 9 1 -4 6 1 -3 4 1 -1 1 1 1 0 1 3 0 1 4 1 1 4 3 1 3 6 1 3 8 1 4 9 1 5 9 1 7 8 1 8 7 1 10 4", "-2 5 0 1 -5 1 1 -4 1 2 -4 1 2 -5 1 1 -5 0 -2 4 1 0 0 1 -2 6 1 -2 8 1 -1 9 1 0 9 1 2 8 1 3 7 1 5 4", "-2 5 0 1 -5 1 1 -4 1 2 -4 1 2 -5 1 1 -5 0 -2 4 1 0 0 1 -6 18 1 -7 20 1 -9 21 1 -10 20 1 -10 18 1 -9 15 1 -6 12 1 -3 10 1 -1 9 1 2 7 1 5 4", "-5 9 0 -5 4 1 -3 1 1 0 -4 1 1 -6 1 2 -9 1 2 -11 1 1 -12 1 -1 -11 1 -2 -9 1 -3 -5 1 -4 1 1 -5 9 0 -5 9 1 -4 6 1 -3 4 1 -1 1 1 1 0 1 3 0 1 4 1 1 4 3 1 2 4 1 -1 4 0 -1 4 1 1 5 1 2 8 1 3 9 1 4 9 1 6 8 1 7 7 1 9 4", "-3 5 0 -3 4 1 -1 1 1 2 -4 1 3 -6 1 4 -9 1 4 -11 1 3 -12 1 1 -11 1 0 -9 1 -1 -5 1 -2 2 1 -2 8 1 -1 9 1 0 9 1 2 8 1 3 7 1 5 4", "-13 12 0 -13 4 1 -11 1 1 -9 0 1 -8 1 1 -8 2 1 -9 6 1 -10 9 0 -9 6 1 -8 4 1 -6 1 1 -4 0 1 -2 0 1 -1 1 1 -1 2 1 -2 6 1 -3 9 0 -2 6 1 -1 4 1 1 1 1 3 0 1 5 0 1 6 1 1 6 3 1 5 6 1 5 8 1 6 9 1 7 9 1 9 8 1 10 7 1 12 4", "-8 10 0 -8 4 1 -6 1 1 -4 0 1 -3 1 1 -3 2 1 -4 6 1 -5 9 0 -4 6 1 -3 4 1 -1 1 1 1 0 1 3 0 1 4 1 1 4 3 1 3 6 1 3 8 1 4 9 1 5 9 1 7 8 1 8 7 1 10 4", "-6 8 0 0 0 1 -2 0 1 -4 1 1 -5 2 1 -6 4 1 -6 6 1 -5 8 1 -3 9 1 -1 9 1 1 8 1 2 7 1 3 5 1 3 3 1 2 1 1 0 0 1 -1 1 1 -1 3 1 0 5 1 2 6 1 5 6 1 7 5 1 8 4", "-7 8 0 -7 4 1 -5 1 1 -4 -1 1 -5 3 1 -11 21 0 -5 3 1 -4 1 1 -2 0 1 0 0 1 2 1 1 3 3 1 3 5 1 2 7 1 1 8 1 -1 9 0 -5 8 1 -3 9 1 0 9 1 3 8 1 5 7 1 8 4", "-6 9 0 3 3 1 2 1 1 0 0 1 -2 0 1 -4 1 1 -5 2 1 -6 4 1 -6 6 1 -5 8 1 -3 9 1 -1 9 1 1 8 0 4 0 1 3 3 1 1 8 1 -2 15 1 -3 18 1 -3 20 1 -2 21 1 0 20 1 1 17 1 1 10 1 3 9 1 6 7 1 9 4", "-5 8 0 -5 4 1 -3 1 1 -2 -1 1 -2 1 1 1 1 1 2 2 1 2 4 1 1 7 1 1 8 1 2 9 1 3 9 1 5 8 1 6 7 1 8 4", "-4 7 0 -4 4 1 -2 1 1 -1 -1 1 -1 1 1 1 4 1 2 6 1 2 8 1 0 9 0 -4 8 1 -2 9 1 2 9 1 4 8 1 5 7 1 7 4", "-3 6 0 -3 4 1 -1 1 1 1 -3 0 4 -12 1 -2 6 1 -2 8 1 -1 9 1 1 9 1 3 8 1 4 7 1 6 4 0 -2 -4 1 5 -4", "-6 9 0 -6 4 1 -4 0 1 -6 6 1 -6 8 1 -5 9 1 -3 9 1 -1 8 1 1 6 1 3 3 0 4 0 1 2 6 1 2 8 1 3 9 1 4 9 1 6 8 1 7 7 1 9 4", "-6 9 0 -6 4 1 -4 0 1 -5 5 1 -5 8 1 -4 9 1 -3 9 1 0 8 1 2 6 1 3 3 1 3 0 0 3 0 1 4 4 1 5 5 1 7 5 1 9 4", "-9 12 0 -6 0 1 -8 2 1 -9 5 1 -9 7 1 -8 9 1 -6 9 1 -4 8 1 -2 6 0 0 0 1 -2 6 1 -2 8 1 -1 9 1 1 9 1 3 8 1 5 6 1 6 3 1 6 0 0 6 0 1 7 4 1 8 5 1 10 5 1 12 4", "-8 8 0 -8 4 1 -6 1 1 -4 0 1 -2 0 1 -1 1 1 -1 8 1 0 9 1 3 9 1 6 7 1 8 4 0 5 1 1 4 0 1 2 0 1 1 1 1 -3 8 1 -4 9 1 -6 9 1 -7 8", "-6 9 0 -6 4 1 -4 0 1 -6 6 1 -6 8 1 -5 9 1 -3 9 1 -1 8 1 1 6 1 3 3 0 4 0 1 -2 18 1 -3 20 1 -5 21 1 -6 20 1 -6 18 1 -5 15 1 -2 12 1 1 10 1 3 9 1 6 7 1 9 4", "-6 8 0 -6 4 1 -4 1 1 -2 0 1 0 0 1 2 2 1 2 4 1 1 6 1 -1 8 1 -4 9 1 -2 10 1 -1 12 1 -1 15 1 -2 18 1 -3 20 1 -5 21 1 -6 20 1 -6 18 1 -5 15 1 -2 12 1 1 10 1 5 7 1 8 4", "-7 7 0 2 -16 1 0 -15 1 -1 -14 1 -2 -12 1 -2 -10 1 -1 -8 1 0 -7 1 1 -5 1 1 -3 1 -1 -1 0 0 -15 1 -1 -13 1 -1 -11 1 0 -9 1 1 -8 1 2 -6 1 2 -4 1 1 -2 1 -3 0 1 1 2 1 2 4 1 2 6 1 1 8 1 0 9 1 -1 11 1 -1 13 1 0 15 0 -1 1 1 1 3 1 1 5 1 0 7 1 -1 8 1 -2 10 1 -2 12 1 -1 14 1 0 15 1 2 16", "-4 4 0 0 -16 1 0 16", "-7 7 0 -2 -16 1 0 -15 1 1 -14 1 2 -12 1 2 -10 1 1 -8 1 0 -7 1 -1 -5 1 -1 -3 1 1 -1 0 0 -15 1 1 -13 1 1 -11 1 0 -9 1 -1 -8 1 -2 -6 1 -2 -4 1 -1 -2 1 3 0 1 -1 2 1 -2 4 1 -2 6 1 -1 8 1 0 9 1 1 11 1 1 13 1 0 15 0 1 1 1 -1 3 1 -1 5 1 0 7 1 1 8 1 2 10 1 2 12 1 1 14 1 0 15 1 -2 16", "-12 12 0 -9 3 1 -9 1 1 -8 -2 1 -6 -3 1 -4 -3 1 -2 -2 1 2 1 1 4 2 1 6 2 1 8 1 1 9 -1 0 -9 1 1 -8 -1 1 -6 -2 1 -4 -2 1 -2 -1 1 2 2 1 4 3 1 6 3 1 8 2 1 9 -1 1 9 -3", "-8 8 0 -8 -12 1 -8 9 1 -7 9 1 -7 -12 1 -6 -12 1 -6 9 1 -5 9 1 -5 -12 1 -4 -12 1 -4 9 1 -3 9 1 -3 -12 1 -2 -12 1 -2 9 1 -1 9 1 -1 -12 1 0 -12 1 0 9 1 1 9 1 1 -12 1 2 -12 1 2 9 1 3 9 1 3 -12 1 4 -12 1 4 9 1 5 9 1 5 -12 1 6 -12 1 6 9 1 7 9 1 7 -12 1 8 -12 1 8 9" };
        //dane - czcionnki
       
        int x = 0, y = 0, lx = 0, ly = 0, xmax = 0, ymax = 0;
        bool draw = false;
        int v = 35; //prędkosc ruchu
        narzedzie wybrane = narzedzie.odreczne;
        
        Graphics g;
        Color kolor = Color.Black;
        

        private void pictureBox1_MouseDown(object sender, MouseEventArgs e)
        {
            draw = true;
            lx = x; ly = y;
            xmax = 0; ymax = 0;
            textBox1.AppendText(lx.ToString("000") + "0 " + ly.ToString("000") + "0 0\n"); 
            switch (wybrane)
            {
                case narzedzie.odreczne:

                    break;
                case narzedzie.linia:


                    break;
                case narzedzie.prostokat:

                    break;
                case narzedzie.tekst:
                    
                    for (int i=0;i<textBox2.TextLength;i++)
                    {
                         if(x + i * (trackBar2.Value + 10) * trackBar1.Value<850)
                        napisza(x + i * (trackBar2.Value + 10) * trackBar1.Value, y, textBox2.Text[i], trackBar1.Value);
                    }
                    
                    break;
            }
        }
     
        private void pictureBox1_MouseMove(object sender, MouseEventArgs e)
        {
            x = e.X; y = e.Y;
            if (x < 5) x = 5; if (x > 855) x = 855;
            if (y < 5) y = 5; if (y > 635) y = 635;
            label1.Text ="Rozmiar: "+ (textBox1.Lines.Count() * 0.012).ToString() + "kB - #"+ textBox1.Lines.Count();
            label8.Text = '(' + x.ToString() + "," + y.ToString() + ")";
            switch (wybrane)
            {
                case narzedzie.odreczne:
                    if (draw && Math.Sqrt((x - lx) * (x - lx) + (y - ly) * (y - ly)) > trackBar2.Maximum- trackBar2.Value)
                    {
                        Pen pisak = new Pen(kolor, trackBar1.Value);
                        pisak.StartCap = System.Drawing.Drawing2D.LineCap.Round;
                        pisak.EndCap = System.Drawing.Drawing2D.LineCap.Round;
                        g.DrawLine(pisak, lx, ly, x, y);
                        textBox1.AppendText(x.ToString("000") + "0 " + y.ToString("000") + "0 1\n");
                        
                        lx = x; ly = y;
                    }
                    break;
                case narzedzie.linia:
                   if(draw)
                    {
                        if (checkBox1.Checked)
                        {
                            if (x != lx)
                            {
                                if ((y - ly) / (x - lx) < 1)
                                {
                                    // g.DrawLine(new Pen(Color.Gray, 1), lx, ly, x, ly); //tymczasowe linie
                                }
                                else
                                {
                                    //g.DrawLine(new Pen(Color.Gray, 1), lx, ly, lx, y);
                                }
                            }
                        }
                        else
                        {
                            //g.DrawLine(new Pen(Color.Gray, 1), lx, ly, x, y);
                        }
                    }
                    break;
                case narzedzie.prostokat:
                    if (draw)
                    {
                        if (x > xmax) xmax = x;
                        if (y > ymax) ymax = y;
                        if(checkBox1.Checked)
                        g.FillRectangle(new SolidBrush(kolor), lx, ly, xmax - lx, ymax - ly); //wypelniony
                        else
                        g.DrawRectangle(new Pen(kolor, trackBar1.Value), lx, ly, xmax - lx, ymax - ly);//niewypelniony

                        Invalidate();
                    }
                    break;
                case narzedzie.elipsa:
                    if (draw)
                    {
                        if (checkBox1.Checked)
                        {
                            //g.FillEllipse(new SolidBrush(kolor), lx, ly, x - lx, y - ly);
                        }
                        else
                        {
                           // g.DrawEllipse(new Pen(kolor, trackBar1.Value), lx, ly, x - lx, y - ly);
                        }
                    }
                    break;

            }
        }

        private void napisza(int pozx, int pozy,int znak, int skala ) //funkcja rysująca znak (tekst)
        {
            string[] words  ;
            if (comboBox1.SelectedIndex == 0) //czcionka1

            {
                 words = sans1[znak - 32].Split(' ');
            }
            else if (comboBox1.SelectedIndex == 1) //2
            {
                words = sansbold[znak - 32].Split(' ');
            }
            else //3
            {
                words=cursive[znak - 32].Split(' ');
            }
            


                for (int i = 2; i < words.Length; i += 3) //dane w pakietach po 3 począwszy od 3 elementu
                {
                    int s = Int32.Parse(words[i]);
                    int a = Int32.Parse(words[i + 1]);
                    int b = Int32.Parse(words[i + 2]);

                int ax = skala * a + pozx; //skalowanie i przesuwanie
                int ay = skala * b + pozy;

                if (ax < 860)  
                    textBox1.AppendText((ax).ToString("000") + "0 " + (ay).ToString("000") + "0 " + s.ToString() + "\n");
                if (s==1)
                {
                    if (checkBox1.Checked)  //tekst pogrubiony
                    {
                        Pen pisak = new Pen(kolor, 2);
                        pisak.StartCap = System.Drawing.Drawing2D.LineCap.Round;
                        pisak.EndCap = System.Drawing.Drawing2D.LineCap.Round;

                        g.DrawLine(pisak, lx, ly, (skala * a + pozx), (skala * b + pozy));
                    }
                    else //tekst zwykły
                    {
                        
                        g.DrawLine(new Pen(kolor, 1), lx, ly, (skala * a + pozx), (skala * b + pozy));
                    }
                }
                lx = (skala * a + pozx);
                ly = (skala * b + pozy);
                    Console.WriteLine("x: {0}, y: {1} {2}", a, b, s);
                }
            
        }
    
        private void pictureBox1_MouseUp(object sender, MouseEventArgs e)
        {
            if (x < 5) x = 5; if (x > 855) x = 855;
            if (y < 5) y = 5; if (y > 855) y = 855;
            draw = false;
        switch(wybrane)
            {
                case narzedzie.odreczne:

                break;

                case narzedzie.linia:
                    if (checkBox1.Checked)
                    {
                        if (x != lx)
                        {
                            if ((y - ly) / (x - lx) < 1)
                            {
                                 g.DrawLine(new Pen(kolor, trackBar1.Value), lx, ly, x, ly);
                                textBox1.AppendText(x.ToString("000") + "0 " + ly.ToString("000") + "0 1\n");
                            }
                            else
                            {
                                g.DrawLine(new Pen(kolor, trackBar1.Value), lx, ly, lx, y);
                                textBox1.AppendText(lx.ToString("000") + "0 " + y.ToString("000") + "0 1\n");
                            }
                        }
                    }
                    else
                    {
                        g.DrawLine(new Pen(kolor, trackBar1.Value), lx, ly, x, y);
                        textBox1.AppendText(x.ToString("000") + "0 " + y.ToString("000") + "0 1\n");
                    }

                    
                    break;

                case narzedzie.prostokat:
                    textBox1.AppendText(x.ToString("000") + "0 " + ly.ToString("000") + "0 1\n");
                    textBox1.AppendText(x.ToString("000") + "0 " + y.ToString("000") + "0 1\n");
                    textBox1.AppendText(lx.ToString("000") + "0 " + y.ToString("000") + "0 1\n");
                    textBox1.AppendText(lx.ToString("000") + "0 " + ly.ToString("000") + "0 1\n");
                    break;

                case narzedzie.elipsa:
                    if (checkBox1.Checked)
                    {
                        g.FillEllipse(new SolidBrush(kolor), lx, ly, x - lx, y - ly);
                    }
                    else
                    {
                        g.DrawEllipse(new Pen(kolor, trackBar1.Value), lx, ly, x - lx, y - ly);
                    }
                    int a = Convert.ToInt32(0.5 * (x - lx)), b = Convert.ToInt32(0.5 * (y - ly)),
                        c = Convert.ToInt32(0.5 * (x + lx)), d = Convert.ToInt32(0.5 * (y + ly));
                    int  yi, xi,dokl;
                    dokl = trackBar2.Value * 6 + 12;
                    textBox1.AppendText((a+c).ToString("000") + "0 " + d.ToString("000") + "0 0\n");
                    for (int i = 1; i <= dokl; i++)
                    {
                        xi = Convert.ToInt32((a * Math.Cos(2*i * Math.PI / dokl) + c));
                        yi = Convert.ToInt32((b * Math.Sin(2*i * Math.PI / dokl) + d));
                        textBox1.AppendText(xi.ToString("000") + "0 " + yi.ToString("000") + "0 1\n");
                       
                    }

                    break;

            }
        }

        private void button9_Click(object sender, EventArgs e)//ołowek
        {
            wybrane = narzedzie.odreczne;
            button9.Enabled = false;
            button10.Enabled = true;
            button11.Enabled = true;
            button12.Enabled = true;
            button13.Enabled = true;
            button14.Enabled = true;
            trackBar1.Visible = true;
            trackBar2.Visible = true;
            checkBox1.Visible = false;
            comboBox1.Visible = false;
            label5.Text = "Grubość";
            label6.Text = "Dokładność";
            textBox2.Visible = false;
            label7.Visible = false;
            groupBox4.Text = "Ołówek";
        }
        private void button10_Click(object sender, EventArgs e)//linia
        {
            wybrane = narzedzie.linia;
            button9.Enabled = true;
            button10.Enabled = false;
            button11.Enabled = true;
            button12.Enabled = true;
            button13.Enabled = true;
            button14.Enabled = true;
            trackBar1.Visible = true;
            trackBar2.Visible = false;
            checkBox1.Visible = true;
            comboBox1.Visible = false;
            checkBox1.Text = "Kąt Prosty";
            label5.Text = "Grubość";
            label6.Text = " ";
            textBox2.Visible = false;
            label7.Visible = false;
            groupBox4.Text = "Linia";

        }
        private void button12_Click(object sender, EventArgs e)//prostokat
        {
            wybrane = narzedzie.prostokat;
            button9.Enabled = true;
            button10.Enabled = true;
            button11.Enabled = true;
            button12.Enabled = false;
            button13.Enabled = true;
            button14.Enabled = true;
            trackBar1.Visible = true;
            trackBar2.Visible = false;
            checkBox1.Visible = true;
            comboBox1.Visible = false;
            checkBox1.Text = "Wypełnienie";
            label5.Text = "Grubość";
            label6.Text = " ";
            textBox2.Visible = false;
            label7.Visible = false;
            groupBox4.Text = "Prostokąt";
        }
        private void button11_Click(object sender, EventArgs e)//elpisa
        {
            wybrane = narzedzie.elipsa;
            button9.Enabled = true;
            button10.Enabled = true;
            button11.Enabled = false;
            button12.Enabled = true;
            button13.Enabled = true;
            button14.Enabled = true;
            trackBar1.Visible = true;
            trackBar2.Visible = true;
            checkBox1.Visible = true;
            comboBox1.Visible = false;
            checkBox1.Text = "Wypełnienie";
            label5.Text = "Grubość";
            label6.Text = " ";
            textBox2.Visible = false;
            label7.Visible = false;
            groupBox4.Text = "Elipsa";
        }
        private void button14_Click(object sender, EventArgs e)//teskst
        {
            wybrane = narzedzie.tekst;
            button9.Enabled = true;
            button10.Enabled = true;
            button11.Enabled = true;
            button12.Enabled = true;
            button13.Enabled = true;
            button14.Enabled = false;
            trackBar1.Visible = true;
            trackBar2.Visible = true;
            checkBox1.Visible = true;
            comboBox1.Visible = true;
            checkBox1.Text = "Bold";
            label5.Text = "Rozmiar";
            label6.Text = "Odstępy";
            textBox2.Visible = true;
            label7.Visible = true;
            groupBox4.Text = "Tekst";
        }
        private void button16_Click(object sender, EventArgs e)//czyść
        {
            g.Clear(Color.White);
            textBox1.Clear();
            textBox3.Clear();
            textBox4.Clear();
            progressBar1.Value = 0;

        }
        public enum narzedzie
        {
            odreczne, linia, prostokat, elipsa, luk,tekst
        }

        

        private void button1_Click(object sender, EventArgs e) //wczytaj 
        {
            openFileDialog1.InitialDirectory = "c:\\";
            openFileDialog1.Filter = "txt files (*.txt)|*.txt|GCODE files (*.gcode)|*.gcode;*.ngc|All files (*.*)|*.*";
           
            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                if (Path.GetExtension(openFileDialog1.FileName) == ".txt")
                {
                    textBox1.Text = File.ReadAllText(openFileDialog1.FileName);
                }
                if (Path.GetExtension(openFileDialog1.FileName) == ".gcode"|| Path.GetExtension(openFileDialog1.FileName) == ".ngc")
                {
                    textBox3.Text = File.ReadAllText(openFileDialog1.FileName);

                    StringBuilder sb_kod = new StringBuilder();
                    StringBuilder sb_punkty = new StringBuilder();
                    int i = 0,pocz;
                    char p='0';
                    do
                    {   if (textBox3.Lines[i].Length > 7)
                        {
                            if (textBox3.Lines[i][4] == 'Z' && textBox3.Lines[i][6] == '0') p = '1';
                            if (textBox3.Lines[i][4] == 'Z' && textBox3.Lines[i][6] != '0') p = '0';
                            if (textBox3.Lines[i][0] == 'G' && textBox3.Lines[i][4] == 'X') //pobierz linijkę
                            {

                                pocz = textBox3.Lines[i].IndexOf('.', 0);
                                Console.WriteLine(textBox3.Lines[i].Substring(pocz - 2, 2) + textBox3.Lines[i].Substring(pocz + 1, 2));
                                if (textBox3.Lines[i][pocz - 2] == ' ')
                                {
                                    
                                    sb_kod.Append("0" + textBox3.Lines[i].Substring(pocz - 1, 1) + textBox3.Lines[i].Substring(pocz + 1, 2)+" ");
                                    // sb_punkty.Append("(")
                                }
                                else
                                {
                                    
                                    sb_kod.Append(textBox3.Lines[i].Substring(pocz - 2, 2) + textBox3.Lines[i].Substring(pocz + 1, 2)+" ");
                                }
                                pocz = textBox3.Lines[i].IndexOf('.', 13);
                                Console.WriteLine(textBox3.Lines[i].Substring(pocz - 2, 2) + textBox3.Lines[i].Substring(pocz + 1, 2) + " " + p + "\n");
                                if (textBox3.Lines[i][pocz - 2] == ' ')
                                {
                                    
                                    sb_kod.Append("0" + textBox3.Lines[i].Substring(pocz - 1, 1) + textBox3.Lines[i].Substring(pocz + 1, 2) + " " + p + "\r\n");

                                }
                                else
                                {
                                    
                                    sb_kod.Append(textBox3.Lines[i].Substring(pocz - 2, 2) + textBox3.Lines[i].Substring(pocz + 1, 2) + " " + p + "\r\n");

                                }

                            }
                        }
                        i++;
                    } while (textBox3.Lines[i] != "(Footer)");
                    // textBox1.Text=String.Join(Environment.NewLine,temp1);
                    textBox1.Text = sb_kod.ToString();
                }
            }
            openFileDialog1.RestoreDirectory = false;

        }

        private void button2_Click(object sender, EventArgs e) //zapisz
        {

            saveFileDialog1.Filter = "txt files (*.txt)|*.txt";
            saveFileDialog1.ShowDialog();
            if (saveFileDialog1.FileName != "")
                File.WriteAllLines(saveFileDialog1.FileName, textBox1.Lines);
                
        }

        private void tabControl1_KeyDown(object sender, KeyEventArgs e)
        {
           
        }

        private void button3_Click(object sender, EventArgs e) //konwertuj
        {
            rysuj();
            przepiszDoListy();
        }

        private void połaczToolStripMenuItem_Click(object sender, EventArgs e)
        {
            try
            { 
            if(!serialPort1.IsOpen)
             serialPort1.Open();
            }
            catch (System.IO.IOException)
            {
                MessageBox.Show("Nie udało się połączyć", "COM error",MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

        }
        private void rozłaczToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (serialPort1.IsOpen)
                serialPort1.Close();
        }

        private void button17_Click(object sender, EventArgs e)  //rysuj ploterem
        {
            /*
            int i = 0;
            if (serialPort1.IsOpen)
            {
                serialPort1.Write("u"); //wyslij
                label9.Text = "Wysyłanie";
                Thread.Sleep(500);
                while (i < textBox1.Lines.Length - 1)
                {
                    serialPort1.Write(textBox1.Lines[i]);
                    serialPort1.Write("\r\n");
                    Console.WriteLine(textBox1.Lines[i]);
                    i++;
                    progressBar1.Value = 100 * i / textBox1.Lines.Count();
                }
                serialPort1.Write("\r\nx");
                serialPort1.Write("i"); //komenda rysuj
                label9.Text = " ";
            }
            else
            {
                MessageBox.Show("Najpierw podłącz urządzenie");
            }
            */
            przepiszDoListy();
            saveFileDialog1.Filter = "pg files (*.pg)|*.pg";
            saveFileDialog1.ShowDialog();
            if (saveFileDialog1.FileName != "")
            //File.WriteAllText(saveFileDialog1.FileName, (textBox4.Lines.Length-1).ToString()+"\r\n");
            //File.AppendAllText(saveFileDialog1.FileName, trackBar5.Value.ToString() + "\r\n");
            File.AppendAllLines(saveFileDialog1.FileName, textBox4.Lines);

        }

        

        private void textBox2_TextChanged(object sender, EventArgs e) //kasowanie niedozwoloncych znaków (narzędzie tekst)
        {
            
            if (textBox2.Text[textBox2.Text.Length - 1] < 32 || textBox2.Text[textBox2.Text.Length - 1]>125)
            {
                textBox2.Text = textBox2.Text.Substring(0, (textBox2.Text.Length - 1));
                textBox2.Select(textBox2.Text.Length, 0);
            }
        }

        private void pictureBox2_MouseDown(object sender, MouseEventArgs e) //minipaleta
        {
            Bitmap b = new Bitmap(pictureBox2.Image);
            kolor = b.GetPixel(e.X, e.Y);
            panel3.BackColor = kolor;

        }

        

        private void timer1_Tick(object sender, EventArgs e) //odświeżanie informacji co sekunde
        {
            
            
            if (serialPort1.IsOpen)
            {
                label2.Text = "Status: Podłączony "+serialPort1.PortName;
                połaczToolStripMenuItem.Enabled = false;
                rozłaczToolStripMenuItem.Enabled = true;
                label3.ForeColor = Color.Black;
                label4.ForeColor = Color.Black;
                label11.ForeColor = Color.Black;
            }
            else
            {
                połaczToolStripMenuItem.Enabled = true;
                rozłaczToolStripMenuItem.Enabled = false;
                label2.Text = "Status: Rozłączony";
                label3.ForeColor = Color.DimGray;
                //label3.Text = "Poziom naładowania:-";
                label3.Text = "-";
                label4.ForeColor = Color.DimGray;
                label4.Text = "Stan:-";
                label11.ForeColor = Color.DimGray;
                label11.Text = "";
            }
            label10.Text = " ";
            //if(a[5]='q')
            //progressBar1.Value = 0;
        }
        //...................................komendy:
        private void button5_Click(object sender, EventArgs e)//pisak
        {
            if (serialPort1.IsOpen)
            {
                serialPort1.Write("e");
            }
        }

        private void button21_Click(object sender, EventArgs e)//zamkniecie
        {
            if (serialPort1.IsOpen)
            {
                serialPort1.Write("z");
                
            }
        }

        private void button18_Click(object sender, EventArgs e)//powrot
        {
            if (serialPort1.IsOpen)
            {
                serialPort1.Write("q");
            }
        }

        private void button19_Click(object sender, EventArgs e)//speedup
        {

            if (serialPort1.IsOpen)
            {
                serialPort1.Write(">");
                v += 5;
                
            }
            label10.Text = "v=" + v + " mm/s";


        }
        private void button20_Click(object sender, EventArgs e)//speeddown
        {

            if (serialPort1.IsOpen)
            {
                serialPort1.Write("<");
                v -= 5;
                
            }
            label10.Text = "v=" + v + " mm/s";
        }

       

        private void button6_Click(object sender, EventArgs e)//lewo
        {
            if (serialPort1.IsOpen)
            {
                serialPort1.Write("a");
            }
        }
        private void button7_Click(object sender, EventArgs e)//prawo
        {
            if (serialPort1.IsOpen)
            {
                serialPort1.Write("d");
            }
        }
        private void button8_Click(object sender, EventArgs e)//dół
        {
            if (serialPort1.IsOpen)
            {
                serialPort1.Write("s");
            }
        }
        private void button4_Click(object sender, EventArgs e)//góra
        {
            if (serialPort1.IsOpen)
            {
                serialPort1.Write("w");
            }
        }
        private void checkBox2_CheckedChanged(object sender, EventArgs e) //tryb testowy (wyłączenie silników, rysunek na lcd)
        {
            if (serialPort1.IsOpen)
            {
                serialPort1.Write("t");
            }

        }
        //........................................
        public Form1()
        {
            
            InitializeComponent();
            button9.Enabled = false;
            g = pictureBox1.CreateGraphics();
        }
        delegate void setString(string s);
         void setS(string a) //analiza danych z plotera
        {
            Console.Write(a);
            label3.Text = "battery: " + a[0]+ ","+a[1]+a[2]+"v";
            label4.Text = "procent: " + a[3]   + a[4]  + "%";
            switch (a[5])
            {
                case 'm': label11.Text = "Stan: Gotowość"; break;
                case 'u': label11.Text = "Stan: Odbieranie"; break;
                case 'i': label11.Text = "Stan: Rysowanie"; break;
                case 'q': label11.Text = "Stan: Powrót"; break;
            }
            
        }

        

        private void button13_Click(object sender, EventArgs e) //odwracanie
        {
           
                string[] lines = textBox1.Lines;

                for (int i = 0; i < textBox1.Lines.Count() - 1; i++)
                {
                    int ax, ay;
                    ax = Int32.Parse(textBox1.Lines[i].Substring(0, 4));
                    ay = Int32.Parse(textBox1.Lines[i].Substring(5, 4));
                    lines[i] = ax.ToString("0000") + " " + (6400 - ay).ToString("0000") + " " + textBox1.Lines[i][10];
                }
                textBox1.Lines = lines;
            
        }

        private void zapiszBitmapęToolStripMenuItem_Click(object sender, EventArgs e) //zapis bitmapy
        {
            Bitmap bmp = new Bitmap(pictureBox1.Width, pictureBox1.Height);
            Graphics rysunek = Graphics.FromImage(bmp);
            rysunek.CopyFromScreen(pictureBox1.RectangleToScreen(pictureBox1.ClientRectangle).Location,Point.Empty, pictureBox1.Size);
            rysunek.Dispose();

            SaveFileDialog zap = new SaveFileDialog();
            zap.Filter = "Plik bmp|*.bmp";
            if(zap.ShowDialog()==DialogResult.OK)
            {
                bmp.Save(zap.FileName, ImageFormat.Bmp);
            }
        }

        private void button22_Click(object sender, EventArgs e)
        {
            int skala = 1;
            /*
            if (comboBox2.SelectedIndex == 0) //czcionka1

            {
                skala = 1;
            }
            else if (comboBox2.SelectedIndex == 1) //2
            {
                skala = 2;
            }
            else //3
            {
                skala = 4;
            }
            */
            // int ai, ax, ay;
            int ai,rys=1,pod=30;
            string[] temp = textBox1.Lines;
            List<string> temp1 = new List<string> { };
            temp1.Add(".PROGRAM rys1()");
            pod = trackBar3.Value;
            temp1.Add("pod="+pod);
           // temp1.Add("JMOVE start");
            //temp1.Add("rog=shift(start by"+420/);

            for (int i = 0; i < textBox1.Lines.Count() - 1; i++)
            {
                if (textBox1.Lines[i].Length > 2)
                {
                    ai = Int32.Parse(textBox1.Lines[i].Substring(10, 1));
                    if (ai == 0 && rys == 1)
                    {
                        temp1.Add("BREAK");
                        temp1.Add("LDEPART(pod)");
                        rys = 0;
                    }
                    else if (ai == 1 && rys == 0)
                    {
                        temp1.Add("LDEPART(-pod)");
                        temp1.Add("BREAK");
                        rys = 1;
                    }
                    
                    if (rys==0)
                    temp1.Add("lmove shift(start by " + (840/skala-Int32.Parse(textBox1.Lines[i].Substring(0, 3))/skala).ToString() + ", " + (Int32.Parse(textBox1.Lines[i].Substring(5, 3)) / skala).ToString() + ", " + "pod)" );
                    else
                     temp1.Add("lmove shift(start by " + (840/skala-Int32.Parse(textBox1.Lines[i].Substring(0, 3)) / skala).ToString() + ", " + (Int32.Parse(textBox1.Lines[i].Substring(5, 3)) / skala).ToString() + ", " + "0)");

                }
            }
            temp1.Add(".END");
            temp = temp1.ToArray();
            saveFileDialog1.Filter = "pg files (*.pg)|*.pg";
            saveFileDialog1.ShowDialog();
            if (saveFileDialog1.FileName != "")
                File.WriteAllLines(saveFileDialog1.FileName, temp);
        }

        private void label12_Click(object sender, EventArgs e)
        {

        }

        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void trackBar3_Scroll(object sender, EventArgs e)
        {
            label13.Text = "Z Height\n" + trackBar3.Value + " mm"; ;
        }
        private void trackBar4_Scroll_1(object sender, EventArgs e)
        {
            label12.Text = "Size\n" + (8600/(64-3.2*trackBar4.Value)).ToString("000")+"x" + (6400 / (64 - 3.2 * trackBar4.Value)).ToString("000")+" mm";
        }

        private void toolStripButton4_Click(object sender, EventArgs e) //O autorze
        {
            Form2 s1 = new Form2();
            s1.ShowDialog();
        }

        private void trackBar5_Scroll(object sender, EventArgs e)
        {
            label14.Text = "Speed\n" + trackBar5.Value + "%";
        }

        private void toolStripButton5_Click(object sender, EventArgs e)
        {
            Form3 s2 = new Form3();
            s2.ShowDialog();
        }

        private void serialPort1_DataReceived(object sender, System.IO.Ports.SerialDataReceivedEventArgs e)//obsluga odbierania danych
        {
            string d = serialPort1.ReadExisting();
            BeginInvoke(new setString(setS), d);
        }

        private void tabPage1_Click(object sender, EventArgs e)
        {
            if (serialPort1.IsOpen)
            {
                //serialPort1.Write("l"); 
            }

        }

        

        private void button15_Click(object sender, EventArgs e)//wybór koloru
        {
            colorDialog1.ShowDialog();
            
            kolor= colorDialog1.Color;
            panel3.BackColor = kolor;
        }

        private void rysuj() //przerysowanie zawartości okna kodu
        {
            g.Clear(Color.White);
            int ax, ay, alx=20, aly=20;
            label9.Text = "Konwertowanie";
            for (int i = 0; i < textBox1.Lines.Count()-1; i++)
            {   if (textBox1.Lines[i].Length > 2)
                {
                    ax = Int32.Parse(textBox1.Lines[i].Substring(0, 4));
                    ay = Int32.Parse(textBox1.Lines[i].Substring(5, 4));
                    if (textBox1.Lines[i][10] == '1')
                        g.DrawLine(new Pen(Color.Black, 1), alx / 10, aly / 10, ax / 10, ay / 10);
                    alx = ax;
                    aly = ay;
                   // Thread.Sleep(3);
                    progressBar1.Value = 100 * i / (textBox1.Lines.Count() - 2);
                    progressBar1.Refresh();
                }
            }
            label9.Text = " ";




        }
        private void przepiszDoListy()
        {
            
            float ax, ay, alx = 0, aly = 0;
                bool rys=true;
            textBox4.Clear();
            //textBox4.AppendText("(0," + (8600 / (64 - 3.2 * trackBar4.Value)).ToString(CultureInfo.InvariantCulture) + "," + "0)\n");
            //textBox4.AppendText("(" + (6400 / (64 - 3.2 * trackBar4.Value)).ToString(CultureInfo.InvariantCulture) + "," + (8600 / (64 - 3.2 * trackBar4.Value)).ToString(CultureInfo.InvariantCulture) + "," + "0)\n");
            //textBox4.AppendText("(" + (6400 / (64 - 3.2 * trackBar4.Value)).ToString(CultureInfo.InvariantCulture) + ",0,0)\n");
            //textBox4.AppendText("(0,0,0)\n");
            textBox4.AppendText(".PROGRAM output.pg()");



            for (int i = 0; i < textBox1.Lines.Count() - 1; i++)
            {
                if (textBox1.Lines[i].Length > 2)
                {
                    ax = Int32.Parse(textBox1.Lines[i].Substring(0, 4));
                    ay = Int32.Parse(textBox1.Lines[i].Substring(5, 4));
                    ax =(float)( ax / (64 - 3.2 * trackBar4.Value));
                    ay = (float)(ay / (64 - 3.2 * trackBar4.Value));
                    if (textBox1.Lines[i][10] == '1' && !rys)
                    {
                        textBox4.AppendText("LMOVE START+TRANS(" + aly.ToString(CultureInfo.InvariantCulture) + "," + alx.ToString(CultureInfo.InvariantCulture) + "," + "0)\n"); //opuszczenie
                        rys = true;
                    }
                    else if (textBox1.Lines[i][10] == '0' && rys)
                    {
                        textBox4.AppendText("LMOVE START+TRANS(" + aly.ToString(CultureInfo.InvariantCulture) + "," + alx.ToString(CultureInfo.InvariantCulture) + "," + trackBar3.Value+")\n"); //podniesienie
                        rys = false;
                    }
                    if(rys)
                    {
                        textBox4.AppendText("LMOVE START+TRANS(" + ay.ToString(CultureInfo.InvariantCulture) + "," + ax.ToString(CultureInfo.InvariantCulture) + "," + "0)\n"); 
                    }
                    else
                    {
                        textBox4.AppendText("LMOVE START+TRANS(" + ay.ToString(CultureInfo.InvariantCulture) + "," + ax.ToString(CultureInfo.InvariantCulture) + "," +trackBar3.Value + ")\n"); 
                    }
                        alx = ax;
                    aly = ay;
                   
                   
                }
            }
            textBox4.AppendText(".END");


        }
        private void przepiszDoListy2()
        {

            float ax, ay, alx = 0, aly = 0;
            bool rys = true;
            int radius = 200;
            int width = 500;
            textBox4.Clear();
            
            textBox4.AppendText(".PROGRAM output.pg()");



            for (int i = 0; i < textBox1.Lines.Count() - 1; i++)
            {
                if (textBox1.Lines[i].Length > 2)
                {
                   
                    
                    ax = Int32.Parse(textBox1.Lines[i].Substring(0, 4));
                    ay = Int32.Parse(textBox1.Lines[i].Substring(5, 4));
                    ax = (float)((ax - 43) * 360 * width / (86 * 2 * 3.1415 * radius));
                    ay = (float)((width/86)*ay);
                    if (textBox1.Lines[i][10] == '1' && !rys)
                    {
                        textBox4.AppendText("LMOVE START+TRANS(" + aly.ToString(CultureInfo.InvariantCulture) + "," + alx.ToString(CultureInfo.InvariantCulture) + "," + "0)\n"); //opuszczenie
                        rys = true;
                    }
                    else if (textBox1.Lines[i][10] == '0' && rys)
                    {
                        textBox4.AppendText("LMOVE START+TRANS(" + aly.ToString(CultureInfo.InvariantCulture) + "," + alx.ToString(CultureInfo.InvariantCulture) + "," + trackBar3.Value + ")\n"); //podniesienie
                        rys = false;
                    }
                    if (rys)
                    {
                        textBox4.AppendText("LMOVE START+TRANS(" + ay.ToString(CultureInfo.InvariantCulture) + "," + ax.ToString(CultureInfo.InvariantCulture) + "," + "0)\n");
                    }
                    else
                    {
                        textBox4.AppendText("LMOVE START+TRANS(" + ay.ToString(CultureInfo.InvariantCulture) + "," + ax.ToString(CultureInfo.InvariantCulture) + "," + trackBar3.Value + ")\n");
                    }
                    alx = ax;
                    aly = ay;


                }
            }
            textBox4.AppendText(".END");


        }

    }
}
